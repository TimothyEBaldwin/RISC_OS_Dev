REM    BufferWriteC

REM  This program stops output line being intermingled
REM  by character when doing parallel builds.

REM  Copyright (c) 2013, Timothy Baldwin
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM

code_size% = 256
line_size% = 1024 * 1024
gettimeofday% = &4E
REM Allocate memory from Module Area
SYS "OS_Module",6,,,code_size% + line_size% + &10000 TO ,,code%

FOR opt% = 0 TO 2 STEP 2
P%=code%
[OPT opt%

.test_amu%
push    {r2, r3, lr}
mov     r3, #&8100
.loop%
ldr     r2, [r12], #4
ldr     lr, [r3], #4
teq     r2, lr
popne   {r2, r3, pc}
teq     r3, #&8100 + &4000
bne     loop%
pop     {r2, r3, pc}

.string%
dcb     "Redacted"
align

.string_time%
ldr     r0, string%
ldr     lr, string%+4
str     r0, [r1]
str     lr, [r1, #4]
mov     r0, #13
strb    r0, [r1, #8]
pop     {r0, lr, pc}

.word_handler%
; Read time?
teq     r0, #14
movne   pc, lr
push    {r0, lr}
bl      test_amu%
popeq   {r0, pc}

; Read 5 byte time?
ldrb    r0, [r1]
teq     r0, #0
beq     string_time%
teq     r0, #3
popne   {r0, pc}
mov     r0, #0
str     r0, [r1]
strb    r0, [r1, #4]
pop     {r0, lr, pc}


.writec_handler%
push    {r0, r1, r2, lr}

; Check for redirection
mvn     r0, #0
mvn     r1, #0
swi     "OS_ChangeRedirection"
teq     r1, #0
popne   {r0, r1, r2, pc}

; Reload r0
ldr     r0, [sp], #4

; Check for CR
teq     r0, #13
popeq   {r1, r2, lr, pc}

; Add to line buffer
adr     r1, line%
ldr     r2, index%
strb    r0, [r1, r2]

teq     r0, #7
addne   r2, r2, #1
streqb  r0, found7%
ldrb    lr, found7%
teqne   r0, lr ; EOL?
teqne   r2, #line_size% ; Too large?
str     r2, index%
popne   {r1, r2, lr, pc}

; Empty buffer?
teq     r2, #0
popeq   {r1, r2, lr, pc}

push    {r0, r3, r4, r7}

; Write to linux standard output
.write%
mov     r0, #1
mov     r7, #4
swi     "IXSupport_LinuxSyscall"
add     r1, r1, r0
sub     r2, r2, r0
cmp     r2, #1 ; More?
cmplt   r0, #1 ; Error or EOF?
bge     write%

; Check for *Spool file
mov     r0, #199
mov     r1, #0
mvn     r2, #0
swi     "OS_Byte"
teq     r1, #0

; Reload and zero index pointer
ldr     r3, index%
mov     r4, #0
str     r4, index%

; Write to *Spool file
mov     r0, #2
adr     r2, line%
swine   "OS_GBPB"

; Return
msr     cpsr_f, #0
pop     {r0, r3, r4, r7}
pop     {r1, r2, lr, pc}

.index%
dcd     0

.found7%
dcd     10


.file_handler%
; Is exec address write?
cmp     r0, #3
popeq   {lr}

; Is load address write?
teq     r0, #2
teqne   r0, #4
beq     write_load%

; Is catalog infomation read?
cmp     r0, #5
cmpne   r0, #6
cmpne   r0, #12
bxlo    lr
teq     r0, #18
teqne   r0, #19
teqne   r0, #24
bxeq    lr

; Is amu running?
push    {lr}
bl      test_amu%
popeq   {pc}
pop     {lr}

; Process after vector call
push    {pc}
bx      lr
nop
bic     r2, r2, #&FF
mov     r3, #0
mov     r5, #&13
pop     {pc}

.write_load%
push    {r2}
bic     r2, r2, #&FF
push    {pc}
bx      lr
nop
pop     {r2, pc}


.line%

]
id% = P% + line_size%
NEXT
SYS "OS_File",16,"IXFS:$.dev.fd.9",id%,0

REM Claim Wordv and Wrchv
PRINT '"Installing BufferWriteC, RISC OS screen disabled.";
SYS "OS_Claim",7,word_handler%,id%
SYS "OS_Claim",3,writec_handler%,0
SYS "OS_Claim",8,file_handler%,id%
SYS "OS_RemoveCursors"
PRINT "..done"'
END
