/* Copyright 2019 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> DrawClipb.h
 *
 * Clipboard handling
 */

extern char *clipdata;        /**< Global containing current clipboard data or 0 if none */
extern int cliplength;        /**< Length of current clipboard data */
extern draw_bboxtyp clippage; /**< Print limits if we export as PostScript*/
extern BOOL cliprotate;       /**< Rotation part from print limits*/

/** @brief Send Message_ClaimEntity
 *
 * If we don't already own the clipboard, then broadcast a Message_ClaimEntity
 * with the flags given in claimtype.
 *
 * @param claimtype flags to pass in the message - see wimp_MCLAIMENTITY_flags_*
 */
void draw_clipboard_claim(int claimtype);


/** @brief See if data on clipboard to paste
 *
 * Check to see if there is any data on the clipboard.
 * If we own the clipboard, returns immediately.  If not, then
 * send a Message_DataRequest to see if anyone else has suitable
 * clipboard data to paste.
 *
 * @return 0 if no data available, 1 if there is data
 */
BOOL draw_clipboard_check_paste(void);


/** @brief Release clipboard claim
 *
 * Call if someone else claims the clipboard, or if we don't want the data
 * any more.
 * Marks our internal flags to show that we don't own the clipboard any more.
 * Frees any clipboard data
 */
void draw_clipboard_release(void);


/** @brief Paste data into document from clipboard.
 *
 * Call to paste data from the clipboard into the given Draw document.
 * Data is either copied from the internal store if we own the clipboard
 * or requested from the taask holding the clipboard.
 *
 * @param diag A diagrec* referencing to the diagram receiving the data
 * @param vuue A viewrec* referencing the view receiving the data
 */
void draw_clipboard_paste(diagrec *diag, viewrec *vuue);


/** @brief Process Message_ClaimEntity
 *
 * Called when task receives a Message_ClaimEntity.
 * If the message comes from an external task, releases the clipboard and
 * frees any data held.
 * @param e A wimpeventstr* returned from Wimp_Poll.
 */
void draw_clipboard_claimed(wimp_eventstr *e);


/** @brief Process Message_DataRequest
 *
 * Called when we receive a Message_DataRequest from an external task
 * that wants to either obtain data from the clipboard or see if there's
 * anything on there (for paste menu entries)
 *
 * @param e A wimp_eventstr* returned from Wimp_Poll
 */
void draw_clipboard_rx_datarequest(wimp_eventstr *e);


/** @defgroup Filetype bitmasks
 *
 * We build a mask that lists the types of data held within a selection.
 * For example, there may be a draw file holding draw objects and a JPEG and
 * some text, so we create a mask of _tm_draw | _tm_jpeg | _tm_text
 * This allows us to negotiate filetypes for export of data based on what
 * is available in the document (ie no point in offering to export sprites in
 * the above example)
 *
 * @{
 */
#define _tm_draw         1 /** Data contains Draw objects */
#define _tm_sprite       2 /** Data contains Sprites */
#define _tm_text         4 /** Data contains Text */
#define _tm_jpeg         8 /** Data contains JPEG(s) */
#define _tm_pure_sprite 16 /** Data contains 'pure' sprites (ie just sprites, no transformations or other objects) */
#define _tm_pure_jpeg   32 /** Data contains 'pure' JPEG (ie just JPEG, no other objects) */
#define _tm_postscript  64 /** Data can be exported as PostScript */
/** @} */


/** @brief extract JPEG from draw file data in memory
 *
 * Check the given object to see if it's a JPEG.  If it's a group, enter
 * the group and check all subobjects to see if any of them are a JPEG.
 * If we are successful, then return a pointer to the JPEG data and the
 * JPEG length.  Also optionally output the data to a file handle.
 *
 * @param ptr         referencing the object to inspect.
 * @param jpegptr     to return a pointer to the JPEG data (or 0 if not interested in the address)
 * @param length      to return the length of the JPEG data (or 0 if not interested)
 * @param filehandle  to output any found data to a file
 * @param success     to hold result of data writing (or 0 if not worried)
 *
 * @return            TRUE if we found a JPEG, FALSE if we didn't
 */
BOOL draw_clipboard_extract_jpeg(draw_objptr ptr, char **jpegptr, int *length,
                                 int filehandle, BOOL *success);


/** @brief extract sprites from draw file data in memory
 *
 * Check the given object to see if it's a sprite.  If it's a group, enter
 * the group and check all subobjects to see if any of them are a sprite.
 * If we are successful, then add the sprite data to the flex object
 * sprite_buffer, update the sprite file header and return the length of the
 * data.
 *
 * @param ptr             referencing the object to inspect.
 * @param sprite_buffer   for the sprite data flex block, or 0 if not wanting the data at this time
 * @param hdr             points to the header block for the sprite file being created; unused if sprite_buffer is 0
 * @param length          to contain the length of the extracted sprites, or 0 if not interested
 *
 * @return                TRUE if we found any sprites, FALSE if we didn't
 */
BOOL draw_clipboard_extract_sprites(draw_objptr ptr, char **sprite_buffer,
                                    sprite_area *hdr, int *length);


/** @brief extract text from draw file data in memory
 *
 * Check the given object to see if it contains text, either as a text
 * label or a text area.  If it's a group, enter the group and check all
 * subobjects to see if any of them are textual.
 * If we are successful, then append text to the flex buffer passed and the
 * text length.  Also optionally output the data to a file handle.
 *
 * @param ptr             referencing the object to inspect.
 * @param text_buffer     a flex text buffer to receive any text that we extracted (or 0 if not interested in the data yet)
 * @param text_length     to return the length of the text data (or 0 if not interested)
 * @param filehandle      to output any found data to a file
 * @param success BOOL*   holds result of data writing (or 0 if not worried)
 *
 * @return TRUE if we found some text, FALSE if we didn't
 */
BOOL draw_clipboard_extract_text(draw_objptr ptr, char **text_buffer,
                                 int *text_length, int filehandle,
                                 BOOL *success);


/** @brief Export data block as PostScript
 * Export data to the given file handle as PostScript,
 * assuming that the PostScript printer driver has
 * been installed.
 *
 * @param handle         File handle, already opened for writing
 * @param diag           Pointer to diagram for page size or NULL to use stored clipboard version
 * @param buffer         Pointer to data buffer containing the data to print
 * @param buffer_length  Length in bytes of the data buffer
 * @return               TRUE is we successfully exported data to the file
 */
BOOL draw_clipboard_export_postscript(int handle, diagrec *diag, char *buffer, int buffer_length);


/** @brief Create file for output
 *
 * Create a file, reporting an error if one occurred.
 * Return the file handle if we were successful.
 *
 * @param name            The full file name to be created.
 * @param handle          To receive the file handle that we opened.
 * @return                TRUE if we successfully opened the file, FALSE if there was a problem.
 */
BOOL draw_clipboard_openup(const char *name, int *handle);


/** @brief Close a file and set its filetype
 *
 * Closes an open file and sets the filetype accordingly.  Reports any errors
 * if they happen.
 *
 * @param name        The full file name that we were using.
 * @param handle      The file handle that we were using.
 * @param filetype    The file type to set once the file is closed.
 * @return            TRUE if we closed and set the type successfully, FALSE if not.
 */
BOOL draw_clipboard_close(const char *name, int *handle, int filetype);


/** @brief write bytes to an open file handle.
 *
 * Writes data to an open file handle.  Writes the whole length.  Reports
 * any errors if they occur.
 *
 * @param handle        the file handle to use for writing
 * @param buffer        the data to be written
 * @param buffer_length the length of the data to be written
 * @return              TRUE if we were successful, FALSE if not.
 */
BOOL draw_clipboard_write_bytes(int handle, const char *buffer, int buffer_length);


/** @brief Negotiate a file type for data export
 *
 * Negotiate a file type based on a mask that describes the types of data
 * currently held on the clipboard and the list that a requesting task
 * provides in a wimp message.
 *
 * @param listptr      pointer to the list of filetypes understood by the requester, terminated by -1
 * @param our_mask     a bit mask describing the types we can offer
 * @return             the actual filetype (eg FileType_Sprite) that we have decided on
 */
int draw_clipboard_negotiate_type(int *listptr, int our_mask);


/** @brief Send a Message_DataLoad
 *
 * Send a Message_DataLoad to a task that has requested data from the clipboard
 * by file transfer
 *
 * @param ev               A pointer to the Wimp_Poll block from the Message_DataSaveOK
 * @param buffer_length    The (estimated) length of the data to be sent
 */
void draw_clipboard_send_dataload(wimp_eventstr *ev, int buffer_length);


/** @brief run a RAM data transfer between us and the requesting task
 *
 * On receipt of a Message_RAMFetch run the RAM data transfer protocol to
 * export clipboard data to another task.
 *
 * @param ev            A pointer to the Wimp_Poll block from the Message_RAMFetch request
 * @param export_buffer A pointer to the data to be exported
 * @param export_length The length of the data to be sent
 */
void draw_clipboard_export_ramxfer_do(wimp_eventstr *ev, char *export_buffer,
                                      int export_length);
