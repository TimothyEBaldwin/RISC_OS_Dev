/* Copyright 2020 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> PaintChoice.c
 *
 * Choices dialogue, loading and saving
 */

#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include "Global/FileTypes.h"
#include "Interface/HighFSI.h"

#include "msgs.h"
#include "os.h"
#include "wimp.h"
#include "wimpt.h"
#include "help.h"
#include "werr.h"
#include "xferrecv.h"
#include "colourmenu.h"

#include "main.h"
#include "MenuD.h"
#include "PaintChoice.h"

static dbox choicedb;
static menu gridpop, gridcol;
static menu lastpop;            /*Last shown popup*/
static main_options opt, opt2;  /*Options, and backup set*/

#define choicedb_set          0
#define choicedb_cancel       20
#define choicedb_zoomden      15
#define choicedb_zoomdenup    18
#define choicedb_zoomdendown  19
#define choicedb_zoomnum      14
#define choicedb_zoomnumup    16
#define choicedb_zoomnumdown  17
#define choicedb_showdetails  21
#define choicedb_deskcolours  4
#define choicedb_showcolours  5
#define choicedb_smallcolours 6
#define choicedb_artistic     7
#define choicedb_rearrange    8
#define choicedb_prompt       9
#define choicedb_showtools    10
#define choicedb_twoclicks    11
#define choicedb_gridpop      13
#define choicedb_griddisplay  12

static void paint_choice_menufillin (void)

{ int i;
  char desc[50];

  /*Ticks in the grid menu*/
  menu_setflags (gridpop, s_Grid_Show, opt.grid.show, FALSE);
  for (i = 0; i <= 15; i++)
    menu_setflags (gridcol, i + 1, i == opt.grid.colour, FALSE);
  /*Grid display field*/
  strcpy (desc, msgs_lookup (opt.grid.show ? "PntGrS" : "PntGrO"));
  dbox_setfield (choicedb, choicedb_griddisplay, desc);
}

static int paint_choice_sat (int value, int low, int high)

{ if (value < low) return low;
  if (value > high) return high;
  return value;
}

static void paint_choice_fillin (void)

{ /*Fill current values*/
  dbox_setnumeric (choicedb, choicedb_showcolours, opt.colours.show_colours);
  dbox_setnumeric (choicedb, choicedb_smallcolours, opt.colours.small_colours);
  dbox_setnumeric (choicedb, choicedb_artistic, opt.advanced.artist_friendly);
  dbox_setnumeric (choicedb, choicedb_rearrange, opt.advanced.remap_palette);
  if (opt.advanced.remap_palette)
    dbox_unfadefield (choicedb, choicedb_prompt);
  else
    dbox_fadefield (choicedb, choicedb_prompt);
  dbox_setnumeric (choicedb, choicedb_prompt, opt.advanced.ask_remap_palette);
  dbox_setnumeric (choicedb, choicedb_showtools, opt.tools.show_tools);
  dbox_setnumeric (choicedb, choicedb_twoclicks, opt.advanced.extra_click_focus);
  dbox_setnumeric (choicedb, choicedb_zoomnum, opt.zoom.mul);
  dbox_setnumeric (choicedb, choicedb_zoomden, opt.zoom.div);
  dbox_setnumeric (choicedb, choicedb_showdetails, opt.display.full_info);
  dbox_setnumeric (choicedb, choicedb_deskcolours, opt.display.use_desktop_colours);
  paint_choice_menufillin ();
}

static menu paint_choice_popup (void *handle)

{ int x, y;
  wimp_wstate state;
  wimp_icon icon;
  wimp_w w = dbox_syshandle (choicedb);
  wimp_eventstr *e = wimpt_last_event ();
  dbox_field f;
  wimp_mousestr m;

  if (handle == NULL)
  {  /*Came here from the menumaker, need to figure out which icon it was*/
     if (event_is_menu_being_recreated ())
       return lastpop;
     wimp_get_point_info (&m);
     f = (dbox_field) m.i;
  }
  else
  {  /*Came here from clicking on the popup icon*/
     f = (dbox_field) handle;
  }
  switch (f)
  { case choicedb_gridpop:
      lastpop = gridpop;
      help_register_handler (&help_simplehandler, (void *) "CHG");
    break;
    default:
      return NULL;
  }
  /*Find where the popup icon is*/
  wimpt_complain (wimp_get_icon_info (w, f, &icon));
  /*Find where the window is*/
  wimp_get_wind_state (w, &state);
  /*Offset the menu to open popup per Style Guide*/
  x =  state.o.x + state.o.box.x0 + icon.box.x1 + 64;
  y = -state.o.y + state.o.box.y1 + icon.box.y1 - 4;
  if (e->data.but.m.x != x || e->data.but.m.y != y)
  { wimp_eventstr fake;
    /*Force it to be on point, we'll back back in a moment to do it again with x/y correct*/
    fake.e = wimp_EBUT;
    fake.data.but.m.bbits = wimp_BMID;
    fake.data.but.m.w = w;
    fake.data.but.m.i = (wimp_i)f;
    fake.data.but.m.x = x;
    fake.data.but.m.y = y;
    wimpt_fake_event (&fake);
  }
  return lastpop;
}

static void paint_choice_menuhit (void *handle, char *hit)

{ handle = handle;

  if (lastpop == gridpop)
  { switch (hit[0])
    { case s_Grid_Show:
        opt.grid.show = !opt.grid.show; /*Toggle*/
      break;

      case s_Grid_Colour:
        if (hit[1]) opt.grid.colour = hit[1] - 1; /*Store it*/
      break;
    }
  }
  /*Reflect with appropriate ticks*/
  paint_choice_menufillin ();
}

static void paint_choice_events (dbox d, void *handle)

{ dbox_field nd, field = dbox_get (d);
  BOOL adjust = dbox_persist ();
  int value, dir = 0;

  switch (field)
  { case choicedb_set:
    { os_filestr osf;
      int len;
      char buffer[256];

      /*Get the non menu driven values*/
      opt.display.full_info = dbox_getnumeric (choicedb, choicedb_showdetails);
      opt.display.use_desktop_colours = dbox_getnumeric (choicedb, choicedb_deskcolours);
      value = dbox_getnumeric (choicedb, choicedb_zoomnum);
      opt.zoom.mul = paint_choice_sat (value, 1, MAXZOOMFACTOR);
      value = dbox_getnumeric (choicedb, choicedb_zoomden);
      opt.zoom.div = paint_choice_sat (value, 1, MAXZOOMFACTOR);
      opt.colours.show_colours = dbox_getnumeric (choicedb, choicedb_showcolours);
      opt.colours.small_colours = dbox_getnumeric (choicedb, choicedb_smallcolours);
      opt.tools.show_tools = dbox_getnumeric (choicedb, choicedb_showtools);
      opt.advanced.extra_click_focus = dbox_getnumeric (choicedb, choicedb_twoclicks);
      opt.advanced.artist_friendly = dbox_getnumeric (choicedb, choicedb_artistic);
      opt.advanced.ask_remap_palette = dbox_getnumeric (choicedb, choicedb_prompt);
      /*Ensure the dir exists, try to create the choices*/
      osf.action = OSFile_CreateDir;
      osf.name = "<Choices$Write>.Paint";
      osf.start = 0; /*Default entries*/
      os_file (&osf);
      len = sprintf(buffer, "| Choices file for Paint\n"
                            "Tools:%s\n"
                            "FileDetail:%s\n"
                            "FileDesk:%s\n"
                            "Colours:%c%c%c%c%c\n"
                            "ClickFocus:%s\n"
                            "Grid:%s\n"
                            "GridColour:%d\n"
                            "Zoom:%d:%d\n", opt.tools.show_tools ? "Yes" : "No",
                                            opt.display.full_info ? "Yes" : "No",
                                            opt.display.use_desktop_colours ? "Yes" : "No",
                                            opt.colours.show_colours ? 'O' : 'o',
                                            opt.colours.small_colours ? 'S' : 's',
                                            opt.advanced.artist_friendly ? 'A' : 'a',
                                            opt.advanced.remap_palette ? 'R' : 'r',
                                            opt.advanced.ask_remap_palette ? 'P' : 'p',
                                            opt.advanced.extra_click_focus ? "Yes" : "No",
                                            opt.grid.show ? "Yes" : "No", opt.grid.colour,
                                            opt.zoom.mul, opt.zoom.div);
      osf.action = OSFile_SaveStamp;
      osf.name = "<Choices$Write>.Paint.Choices";
      osf.loadaddr = FileType_Data;
      osf.start = (int) buffer;
      osf.end = (int) &buffer[len];
      if (os_file (&osf))
      { werr (FALSE, msgs_lookup ("PntWH")); /*Can't save choices, write protected?*/
        return;
      }
      /*Now confirmed, use them and update the backup set*/
      paint_choice_read();
      if (!adjust)
      { dbox_dispose (&choicedb);
        choicedb = 0;
      }
    }
    break;

    case dbox_CLOSE:
    case choicedb_cancel:
      if (!adjust)
      { dbox_dispose (&choicedb);
        choicedb = 0;
      }
      else
      { /*Cancel edits by reverting to the backup*/
        opt = opt2;
        paint_choice_fillin (); /*Leave it open*/
      }
    break;

    case choicedb_rearrange:
      opt.advanced.remap_palette = !opt.advanced.remap_palette;
      dbox_setnumeric (choicedb, choicedb_rearrange, opt.advanced.remap_palette);
      if (opt.advanced.remap_palette)
        dbox_unfadefield (choicedb, choicedb_prompt);
      else
        dbox_fadefield (choicedb, choicedb_prompt);
    break;

    case choicedb_gridpop:
      paint_choice_popup ((void *) field);
    break;

    case choicedb_zoomdendown:
    case choicedb_zoomnumdown:
      dir = 2;
    case choicedb_zoomdenup:
    case choicedb_zoomnumup:
      dir = 1 - dir;
      nd = ((field == choicedb_zoomdendown) || (field == choicedb_zoomdenup)) ? choicedb_zoomden
                                                                              : choicedb_zoomnum;
      value = dbox_getnumeric (choicedb, nd);
      value = adjust ? (value - dir) : (value + dir);
      dbox_setnumeric (choicedb, nd, paint_choice_sat (value, 1, MAXZOOMFACTOR));
    break;
  }
  handle = handle;
}

void paint_choice_display (void)

{ if (choicedb == 0)
  { choicedb = dbox_new ("choices");
    if (choicedb)
    { wimp_w w = dbox_syshandle (choicedb);
      /*Associate menus*/
      gridpop = menu_new (msgs_lookup ("PntMH"), msgs_lookup ("PntMO"));
      gridcol = colourmenu_make (msgs_lookup ("PntMH"), 0);
      menu_submenu (gridpop, s_Grid_Colour, gridcol);
      event_attachmenumaker (w, paint_choice_popup, paint_choice_menuhit, NULL);
      /*Attach handlers*/
      dbox_raw_eventhandler (choicedb, &help_dboxrawevents, (void *) "CHOY");
      dbox_eventhandler (choicedb, &paint_choice_events, NULL);
      /*Populate*/
      paint_choice_fillin ();
      dbox_showstatic (choicedb);
    }
  }
  else
  { wimp_w w = dbox_syshandle (choicedb);
    wimp_wstate state;
    /*Already exists, ensure on top*/
    wimpt_complain (wimp_get_wind_state (w, &state));
    state.o.behind = (wimp_w)-1;
    wimpt_complain (wimp_open_wind (&state.o));
  }
}

typedef enum
{ TAG_SHOWTOOLS,
  TAG_SHOWDETAILS,
  TAG_DESKCOLOURS,
  TAG_COLOURS,
  TAG_CLICKFOCUS,
  TAG_GRID,
  TAG_GRIDCOLOUR,
  TAG_ZOOM,

  TAG_MAX
} choice_tag;

static choice_tag paint_choice_tag (const char *tag)
{ int i;
  static const char *tags[TAG_MAX] = { "tools", "filedetail", "filedesk", "colours",
                                       "clickfocus", "grid", "gridcolour", "zoom"
                                     };
  for (i = 0; i < TAG_MAX; i++)
    if (main_matches (tag, tags[i]))
      return (choice_tag) i;
  return TAG_MAX;
}

void paint_choice_read (void)

{ FILE *f;
  char line[64];
  char *value, *tag;
  int numeric;
  BOOL yes;
  static const main_options initial_options = { {/*full info?*/ FALSE, /*use desktop colours?*/ TRUE},
                                                {/*show colours?*/ TRUE, /*small colours?*/ FALSE},
                                                {/*show tools?*/ TRUE},
                                                {/*zoom*/ 1, 1},
                                                {/*grid?*/ TRUE, /*colour*/ 7},
                                                {/*extended*/ TRUE /*always on in versions from Black onwards*/},
                                                {/*extra click focus?*/TRUE, /*art. friendly?*/TRUE,
                                                 /*remap pal?*/FALSE, /*ask remap pal?*/FALSE}
                                              };

  /*Set defaults*/
  opt = initial_options;
  /*Parse overrides*/
  f = fopen ("Choices:Paint.Choices", "r");
  if (f != NULL)
  { while (fgets (line, sizeof (line), f) != NULL)
    { tag = line;
      while (*tag == ' ') tag++; /*Left trim*/
      if (*tag == '|') continue; /*Comment*/
      value = strchr (tag, ':');
      if (value == NULL) continue; /*Tag but no value*/
      *value = '\0'; value++;
      /*Evaluate common ones*/
      yes = toupper (*value) == 'Y';
      numeric = atoi (value);
      switch (paint_choice_tag (tag))
      { case TAG_SHOWTOOLS:
          opt.tools.show_tools = yes;
          break;
        case TAG_GRIDCOLOUR:
          if ((unsigned int)numeric < 16)
            opt.grid.colour = numeric;
          break;
        case TAG_ZOOM:
          if (numeric >= 1 && numeric <= MAXZOOMFACTOR)
          { const char *tail = strchr (value, ':');
            if (tail)
            { int div = atoi (tail + 1);
              if (div >= 1 && div <= MAXZOOMFACTOR)
                opt.zoom.mul = numeric, opt.zoom.div = div;
            }
          }
          break;
        case TAG_GRID:
          opt.grid.show = yes;
          break;
        case TAG_SHOWDETAILS:
          opt.display.full_info = yes;
          break;
        case TAG_DESKCOLOURS:
          opt.display.use_desktop_colours = yes;
          break;
        case TAG_CLICKFOCUS:
          opt.advanced.extra_click_focus = yes;
          break;
        case TAG_COLOURS:
          while (*value)
          { switch (toupper (*value))
            { case 'O': opt.colours.show_colours = *value == 'O'; break;
              case 'S': opt.colours.small_colours = *value == 'S'; break;
              case 'A': opt.advanced.artist_friendly = *value == 'A'; break;
              case 'R': opt.advanced.remap_palette = *value == 'R'; break;
              case 'P': opt.advanced.ask_remap_palette = *value == 'P'; break;
            }
            value++;
          }
          break;
        }
    }
    fclose (f);
  }
  /*Keep a backup copy for restoring*/
  opt2 = opt;
  /*Publish for the main menus*/
  main_current_options = opt;
}
