/* Copyright 2019 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef Clipboard_H
#define Clipboard_H

/* -> Clipboard.h
 *
 * Clipboard handling
 */

/** @brief Send Message_ClaimEntity
 *
 * If we don't already own the clipboard, then broadcast a Message_ClaimEntity
 * with the flags given in claimtype.
 *
 * @param claimtype flags to pass in the message - see wimp_MCLAIMENTITY_flags_*
 */

void paint_clipboard_claim(int claimtype);


/** @brief See if data on clipboard to paste
 *
 * Check to see if there is any data on the clipboard.
 * If we own the clipboard, returns immediately.  If not, then
 * send a Message_DataRequest to see if anyone else has suitable
 * clipboard data to paste.
 *
 * @return 0 if no data available, 1 if there is data
 */

BOOL paint_clipboard_check_paste(void);


/** @brief Copy selected sprites to buffer
 *
 * Allocate a buffer and transfer all selected sprites to it
 *
 * @param window The main window holding the desired selection
 * @param buffer Destination buffer (passed as a sprite_area** or a char**)
 * @param type   Whether the destination is a sprite area or a raw file
 *
 * @return 1 if OK, 0 if failed to create buffer
 */

typedef enum
{
  SELBUFFER_SPRITEAREA,
  SELBUFFER_FILEDATA
} selbuffer_type;

BOOL paint_clipboard_get_selection(main_window *window,void *buffer,selbuffer_type type);


/** @brief Set clipboard data
 *
 * Transfer data from the selection in the main window to the clipboard if possible
 *
 * @param window The main window that holds a selection
 *
 * @return 0 if failed to copy for some reason (errors already reported), 1 if OK
 */

BOOL paint_clipboard_set_data_from_selection(main_window *window);


/** @brief Release clipboard claim
 *
 * Call if someone else claims the clipboard, or if we don't want the data
 * any more.
 * Marks our internal flags to show that we don't own the clipboard any more.
 * Frees any clipboard data
 */

void paint_clipboard_release(void);


/** @brief Paste data into document from clipboard.
 *
 * Call to paste data from the clipboard into the given Draw document.
 * Data is either copied from the internal store if we own the clipboard
 * or requested from the task holding the clipboard.
 *
 * @param window Pointer to a main_window representing the destination window for the paste
 *
 */

void paint_clipboard_paste(main_window *window);


/** @brief Process Message_ClaimEntity
 *
 * Called when task receives a Message_ClaimEntity.
 * If the message comes from an external task, releases the clipboard and
 * frees any data held.
 * @param e A wimpeventstr* returned from Wimp_Poll.
 */

void paint_clipboard_claimed(wimp_eventstr *e);


/** @brief Process Message_DataRequest
 *
 * Called when we receive a Message_DataRequest from an external task
 * that wants to either obtain data from the clipboard or see if there's
 * anything on there (for paste menu entries)
 *
 * @param e A wimp_eventstr* returned from Wimp_Poll
 */

void paint_clipboard_rx_datarequest(wimp_eventstr *e);


/** @brief Create file for output
 *
 * Create a file, reporting an error if one occurred.
 * Return the file handle if we were successful.
 *
 * @param name            The full file name to be created.
 * @param handle          To receive the file handle that we opened.
 * @return                TRUE if we successfully opened the file, FALSE if there was a problem.
 */

BOOL paint_clipboard_openup(const char *name, int *handle);


/** @brief Close a file and set its filetype
 *
 * Closes an open file and sets the filetype accordingly.  Reports any errors
 * if they happen.
 *
 * @param name        The full file name that we were using.
 * @param handle      The file handle that we were using.
 * @param filetype    The file type to set once the file is closed.
 * @return            TRUE if we closed and set the type successfully, FALSE if not.
 */

BOOL paint_clipboard_close(const char *name, int *handle, int filetype);


/** @brief write bytes to an open file handle.
 *
 * Writes data to an open file handle.  Writes the whole length.  Reports
 * any errors if they occur.
 *
 * @param handle        the file handle to use for writing
 * @param buffer        the data to be written
 * @param buffer_length the length of the data to be written
 * @return              TRUE if we were successful, FALSE if not.
 */

BOOL paint_clipboard_write_bytes(int handle, const char *buffer, int buffer_length);


/** @brief Send a Message_DataLoad
 *
 * Send a Message_DataLoad to a task that has requested data from the clipboard
 * by file transfer
 *
 * @param ev               A pointer to the Wimp_Poll block from the Message_DataSaveOK
 * @param buffer_length    The (estimated) length of the data to be sent
 */

void paint_clipboard_send_dataload(wimp_eventstr *ev, int buffer_length);


/** @brief run a RAM data transfer between us and the requesting task
 *
 * On receipt of a Message_RAMFetch run the RAM data transfer protocol to
 * export clipboard data to another task.
 *
 * @param ev            A pointer to the Wimp_Poll block from the Message_RAMFetch request
 * @param buffer        A pointer to the data to be exported
 * @param length        The amount of data to send
 *
 */

void paint_clipboard_export_ramxfer_do(wimp_eventstr *ev, char *buffer, int length);

/** @brief check if a filetype exists in a -1 terminated list
 *
 * When processing messages, check the list of filetypes supplied
 * for a particular entry
 *
 * @param listptr    A pointer to the -1 terminated list
 * @param filetype   The filetype to look for
 *
 */

BOOL paint_clipboard_list_has_type(int *listptr, int filetype);


#endif
