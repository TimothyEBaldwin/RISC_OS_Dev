/* Copyright 2019 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef CnPDrag_H
#define CnPDrag_H

/* -> CnPDrag.h
 *
 * Drag and Drop support
 */

/** @brief Status of any current drag operation
 *
 * This structure contains all of our status details for the current drag
 * operation from Paint to elsewhere
 */

typedef struct
{
  BOOL autoscrolling;      /**< TRUE if we are currently autoscrolling */
  wimp_w autoscroll_w;     /**< current autoscroll window handle */
  main_window *window;     /**< source window for the drag so we can see if we need to cancel autoscrolls etc. */
  BOOL shift_pressed;      /**< TRUE if shift was pressed at the drag start */
  int last_msg;            /**< monotonic time we last sent a Message_Dragging */
  wimp_box millipt;        /**< bounding box of drag box in millipoint relative to pointer (use 400mpt=1 OS unit) */
  wimp_box osunits;        /**< bounding box of drag box in OS units relative to pointer */
  wimp_box parent;         /**< screen bounding box for current drag purposes, cached when the drag starts */
  int claimant;            /**< the current drag claimant if any (-1 if not) */
  BOOL drag_finished;      /**< TRUE if the drag operation is now finished */
  BOOL drag_aborted;       /**< TRUE if the drag operation has been aborted (Escape pressed) */
  int lastref;             /**< last my_ref from the last Wimp message received */
  int old_dragclaim_flags; /**< previous drag claim flags so we know if we need to change pointer shapes, etc */
  char dragasprite[12];    /**< Set if we are using dragasprite, 0 if an outline drag box */
  main_window *datasource; /**< main_window containing the source data */
} cnp_dragstr;


/** @brief Status of any current drop operation
 *
 * This structure contains all of our status details for the current drop
 * operation when objects are dragged to Paint from elsewhere
 */

typedef struct
{
  BOOL claiming;           /**< TRUE if we are claiming the current drop operation */
  BOOL autoscrolling;      /**< TRUE if we are currently autoscrolling one of our windows */
  wimp_w autoscrolling_w;  /**< the window handle of the window we're autoscrolling */
} cnp_dragclaimstr;


/** @brief Global variables
*/

extern cnp_dragstr current_drag_op;        /**< state of current drag operation, if any */
extern cnp_dragclaimstr current_dragclaim; /**< state of current drop operation, if any */


/** @brief Stop a drag operation
 *
 * Stops a drag that is in progress: stop any autoscrolling that is in progress,
 * cancel any drag box and reset the mouse pointer shape. */

void cnp_drag_stop_current(void);


/** @brief Aborts a drag operation
 *
 * If the user presses Escape, the current drag operation is cancelled and
 * marked as aborted.  We send a message to any claimant to confirm this.
 */

void cnp_drag_abort_current(void);


/** @brief Update current drag status
 *
 * Called at every Null wimp event to update any drag status.
 * This will result in Message_Dragging broadcasts if necessary.
 *
 * @param mouse  the current mouse position
 */

void cnp_drag_check_current_op(void);


/** @brief Respond to User_DragBox wimp event
 *
 * Called when we receive a User_DragBox event at the end of a drag (button released)
 * This will then perform all of the necessary housekeeping, moving or copying data to
 * another file in the same task, or exporting to another task as needed.
 *
 * @param e  pointing to the block returned by Wimp_Poll
 */

void cnp_drag_poll_response(wimp_eventstr *e);


/** @brief Start up a drag operation when the user drags a selection
 *
 * Starts up a drag operation when selected object(s) is/are dragged.
 * Creates a drag box, sets the pointer shape, works out the file type
 * information of the objects being dragged and sets autoscrolling up for
 * the current window
 *
 * @param window     Pointer to the main_window that contains the drag that has been started
 * @param spritename Name of the sprite to use for the drag
 */

void cnp_drag_start_export(main_window *window, char *spritename);


/** @brief Process Message_DragClaim
 *
 * Called when received a Message_DragClaim from another task.
 * Updates our internal structures regarding the state of the drag operation.
 * This may result in drag boxes being shown/hidden, pointers being changed, etc.
 * If message was a response to a drag end notification, then start up the data export
 * protocol.
 *
 * @param e  Pointer to the data block from Wimp_Poll
 */

void cnp_drag_rx_mdragclaim(wimp_eventstr *e);


/** @brief Process Message_Dragging
 *
 * Called when we receive a Message_Dragging from another task.
 * If we are interested in the data offered, this triggers a reply
 * via Message_DragClaim and updates our internal structures.
 *
 * @param e  Pointer to the data block from Wimp_Poll
 */

void cnp_drag_rx_mdragging(wimp_eventstr *e);


/** @brief Process bounced Message_Dragging
 *
 * When Message_Dragging bounces it is either because a claimant is releasing a claim
 * to the drag, or because we tried to export drag informaton to a task that doesn't
 * understand the drag/drop protocol.
 * Handle both cases as necessary - mark claim as released, or send Message_DataSave
 * if needed.
 *
 * @param e  Pointer to the data block from Wimp_Poll
 */

void cnp_drag_rx_mdragging_bounce(wimp_eventstr *e);


/** @brief Stop any claim on a drop operation
 *
 * Reset any internal data structures as we are no longer acting as a claimant
 * of data being dragged to us.  Also cancel any autoscrolling if we were running it.
 */

void cnp_drag_release_claim(void);

#endif
