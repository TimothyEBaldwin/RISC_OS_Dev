REM Copyright 2012 Castle Technology Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM
REM > Dialogues

REM *************************************************************************
REM Alarm window
REM *************************************************************************

DEFPROCcreate_alarm_wind(t$,W%,I%)
 LOCAL E%,F%,B%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCcreate_alarm_wind")
 B%=(1<<21)+(15<<12)
 IF I%?alarm_applalarm% W%=FALSE
 IF W% F%=15<<12:E%=11<<12 ELSE F%=0:E%=0
 PROCset_title(a_wind%,t$)
 
 PROCrefresh_window(a_wind%,I%)
 
 IF I%?alarm_applalarm% THEN
  PROCset_string(a_wind%,16,FNmsg_0("ActvA5"))
  PROCset_string(a_wind%,17,$(I%+alarm_line1%))
  PROCset_string(a_wind%,18,"")
 ELSE
  PROCset_string(a_wind%,16,$(I%+alarm_line1%))
  PROCset_string(a_wind%,17,$(I%+alarm_line2%))
  PROCset_string(a_wind%,18,$(I%+alarm_line3%))
 ENDIF
 PROCsetstate(a_wind%,16,F%,15<<12)
 PROCsetstate(a_wind%,17,F%,15<<12)
 PROCsetstate(a_wind%,18,F%,15<<12)
 REM urgent toggle
 PROCsetstate(a_wind%,5,E%,B%)
 IF I%?alarm_urgent% PROCsetstate(a_wind%,5,1<<21,0)
 REM repeating alarm toggle
 PROCsetstate(a_wind%,19,E%,B%)
 REM either every
 PROCsetstate(a_wind%,32,E%,B%)
 REM or on the
 PROCsetstate(a_wind%,33,E%,B%)
 PROCset_repeat_flags(W%,I%)
 REM task alarm toggle
 PROCsetstate(a_wind%,29,E%,B%)
 IF I%?alarm_taskalarm% THEN
  PROCsetstate(a_wind%,29,1<<21,0)
  REM disable urgent button if task alarm
  PROCsetstate(a_wind%,5,1<<22,1<<22)
 ELSE
  REM enable urgent button if not task alarm
  PROCsetstate(a_wind%,5,0,1<<22)
 ENDIF
 REM five day week toggle
 PROCsetstate(a_wind%,30,E%,B%)
 IF I%?alarm_fvdywk% PROCsetstate(a_wind%,30,1<<21,0)
ENDPROC
:
DEFPROCopen_alarm_wind
 LOCAL X%,Y%
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(0),"PROCopen_alarm_wind")
 !Q%=-2
 SYS"Wimp_GetWindowState",,Q%
 Y%=Q%!4-Q%!20
 !Q%=-2:Q%!4=ictime%
 SYS"Wimp_GetIconState",,Q%
 X%=Y%+Q%!16-820
 PROCtell_pinboard(a_wind%)
 !Q%=a_wind%
 SYS"Wimp_GetWindowState",,Q%
 Q%!12=(Q%!12-Q%!4)+X%
 Q%!16=140+608
 Q%!4=X%
 Q%!20=0
 Q%!24=0
 Q%!28=-1
 SYS"Wimp_OpenWindow",,Q%
 PROCtoggle_size(a_wind%,alarm_repeating%?alarms%(0)<>0)
ENDPROC
:
DEFPROCselect_all_alarms
 LOCAL C%
 C%=alarm_head%
 WHILE C%
  REM IFFNcheck_pointer PROCcheck_pointer(C%,"PROCselect_all_alarms")
  IFC%?alarm_applalarm%=0 C%?alarm_selected%=1
  C%=C%!alarm_next%
 ENDWHILE
 !Q%=browser%
 Q%!4=0
 Q%!8=-(alarm_count%*48+52)
 Q%!12=assembler%!16
 Q%!16=0
 SYS"Wimp_ForceRedraw",!Q%,Q%!4,Q%!8,Q%!12,Q%!16
ENDPROC
:
DEFPROCunset_alarms_selection
 LOCAL p%
 p%=alarm_head%
 WHILE p%
  REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCunset_alarms_selection")
  IFp%?alarm_selected% p%?alarm_selected%=0
  p%=p%!alarm_next%
 ENDWHILE
 !Q%=browser%
 Q%!4=0
 Q%!8=-(alarm_count%*48+52)
 Q%!12=assembler%!16
 Q%!16=0
 SYS"Wimp_ForceRedraw",!Q%,Q%!4,Q%!8,Q%!12,Q%!16
ENDPROC
:
DEFPROCopen_top_pane(block%,handle%)
 REM open a pane window at the top of an edit window
 REM this routine uses the block passed to it, so it
 REM is necessary to save any values which get corrupted
 REM by this routine.
 LOCAL h%,y%,x1%,x2%,sx%,sy%
 h%=!block%
 y%=block%!8
 x1%=block%!4
 x2%=block%!12
 sx%=block%!20
 sy%=block%!24
 REM now adjust the parameters
 REM specify the pane window to be opened
 !block%=handle%
 REM make the pane open just below the edit window
 block%!8=block%!16-52:REM pane_height%
 REM don't allow the pane window to scroll
 block%!20=0
 block%!24=0
 SYS"Wimp_OpenWindow",,block%
 !block%=h%
 block%!4=x1%
 block%!12=x2%
 block%!8=y%
 block%!20=sx%
 block%!24=sy%
ENDPROC
:
DEFPROCredraw_alarm(pointer%)
 LOCAL p%,y%
 p%=alarm_head%
 y%=-52
 WHILE p%
  IFp%=pointer% THEN
   !Q%=browser%
   Q%!4=0
   Q%!8=y%-48
   Q%!12=assembler%!16
   Q%!16=y%
   SYS"Wimp_ForceRedraw",!Q%,Q%!4,Q%!8,Q%!12,Q%!16
   p%=0
  ENDIF
  y%-=48
  IFp% p%=p%!alarm_next%
 ENDWHILE
ENDPROC
:
DEFFNalarm_selection_count
 LOCAL m2%,m3%
 m3%=0
 m2%=alarm_head%
 WHILE m2% AND m3%<2
  REM IFFNcheck_pointer PROCcheck_pointer(m2%,"FNalarm_selection_count")
  IFm2%?alarm_selected% m3%+=1
  m2%=m2%!alarm_next%
 ENDWHILE
=m3%

REM *************************************************************************
REM Setup window
REM *************************************************************************

DEFPROCopen_setup
 LOCAL Y%,X%
 REM ensure that the window has the right settings
 IFsilent_alarm% THEN
  PROCsetstate(setup%,0,1<<21,1<<21)
 ELSE
  PROCsetstate(setup%,0,0,1<<21)
 ENDIF
 IFfivedayweek% THEN
  PROCsetstate(setup%,1,1<<21,1<<21)
  Y%=0
 ELSE
  PROCsetstate(setup%,1,0,1<<21)
  Y%=1<<22
 ENDIF
 FORX%=1 TO 7
  IFFNvalid_day(X%) THEN
   PROCsetstate(setup%,30+X%,Y%+(1<<21),3<<21)
  ELSE
   PROCsetstate(setup%,30+X%,Y%,3<<21)
  ENDIF
 NEXT
 IFglobal_timeout%=-1 THEN
  PROCsetstate(setup%,38,1<<21,1<<21)
  PROCsetstate(setup%,39,0,1<<21)
  PROCsetstate(setup%,2,1<<22,1<<22)
 ELSE
  PROCsetstate(setup%,38,0,1<<21)
  PROCsetstate(setup%,39,1<<21,1<<21)
  PROCset_string(setup%,2,STR$(global_timeout%))
  PROCsetstate(setup%,2,0,1<<22)
 ENDIF
 IFalarm_autosave% PROCsetstate(setup%,19,1<<21,1<<21) ELSE PROCsetstate(setup%,19,0,1<<21)
 IFalarm_confirm%  PROCsetstate(setup%,23,1<<21,1<<21) ELSE PROCsetstate(setup%,23,0,1<<21)
 SYS"Territory_ReadTimeZones",-1 TO X%,Y%
 PROCset_string(setup%,3,FNmsg_2("TZSwtch",FNrtoz(X%),FNrtoz(Y%)))
 PROCset_string(setup%,30,userformat$)
 FORX%=1 TO 5
  IFformat%=X% THEN
   PROCsetstate(setup%,24+X%,1<<21,1<<21)
  ELSE
   PROCsetstate(setup%,24+X%,0,1<<21)
  ENDIF
 NEXT
 IFformat%<>5 PROCsetstate(setup%,30,1<<22,1<<22) ELSE PROCsetstate(setup%,30,0,1<<21)
 PROCstartup_bst_alarms
 IFbst_alarm_3% THEN
  PROCenable_bst
 ELSE
  PROCdisable_bst
 ENDIF
 !Q%=setup%:SYS"Wimp_GetWindowState",,Q%
 IF(Q%!32 AND (1<<16))=0 THEN
  REM window was already closed,
  REM so we can quite happily move it
  !Q1%=-2
  SYS"Wimp_GetWindowState",,Q1%
  Y%=Q1%!4-Q1%!20
  !Q1%=-2:Q1%!4=ictime%
  SYS"Wimp_GetIconState",,Q1%
  X%=Y%+Q1%!16-1034
  Q%!12=(Q%!12-Q%!4)+X%
  Q%!16=728+140
  Q%!8=140
  Q%!4=X%
  Q%!20=0
  Q%!24=0
 ELSE
  PROCtell_pinboard(setup%)
 ENDIF
 REM we want to force it to the top
 Q%!28=-1
 SYS"Wimp_OpenWindow",,Q%
 IFglobal_timeout%<>-1 THEN
  SYS"Wimp_SetCaretPosition",setup%,2,-1,-1,-1,LEN(FNread_string(setup%,2))
 ELSE
  IFformat%=5 SYS"Wimp_SetCaretPosition",setup%,30,-1,-1,-1,LEN(FNread_string(setup%,30))
 ENDIF
ENDPROC
:
DEFPROCcheck_setup_window(P%,M%,I%)
 LOCAL i%
 CASE I% OF
 WHEN  1:FORi%=1 TO 7
          IFFNicon_set(setup%,1) THEN
           PROCsetstate(setup%,30+i%,0,1<<22)
          ELSE
           PROCsetstate(setup%,30+i%,1<<22,1<<22)
          ENDIF
         NEXT
 WHEN  3:IFFNicon_set(setup%,3) PROCenable_bst ELSE PROCdisable_bst
 
 WHEN 20:PROCchange_hour(alarms%(3),M%,setup%)
 WHEN 21:PROCchange_hour(alarms%(3),P%,setup%)
 WHEN 41:PROCchange_min(alarms%(3),M%,setup%)
 WHEN 42:PROCchange_min(alarms%(3),P%,setup%)
 WHEN  5:PROCchange_date(alarms%(3),M%,setup%)
 WHEN  7:PROCchange_date(alarms%(3),P%,setup%)
 WHEN  8:PROCchange_month(alarms%(3),M%,setup%)
 WHEN 10:PROCchange_month(alarms%(3),P%,setup%)
 WHEN 49:PROCchange_year(alarms%(3),M%,setup%)
 WHEN 50:PROCchange_year(alarms%(3),P%,setup%)
 
 WHEN 47:PROCchange_hour(alarms%(4),M%,setup%)
 WHEN 46:PROCchange_hour(alarms%(4),P%,setup%)
 WHEN 44:PROCchange_min(alarms%(4),M%,setup%)
 WHEN 43:PROCchange_min(alarms%(4),P%,setup%)
 WHEN 12:PROCchange_date(alarms%(4),M%,setup%)
 WHEN 14:PROCchange_date(alarms%(4),P%,setup%)
 WHEN 15:PROCchange_month(alarms%(4),M%,setup%)
 WHEN 17:PROCchange_month(alarms%(4),P%,setup%)
 WHEN 51:PROCchange_year(alarms%(4),M%,setup%)
 WHEN 53:PROCchange_year(alarms%(4),P%,setup%)
 
 WHEN 18:PROCok_save_option(P%)
 WHEN 25:PROCsetstate(setup%,25,1<<21,1<<21)
 WHEN 26:PROCsetstate(setup%,26,1<<21,1<<21)
 WHEN 27:PROCsetstate(setup%,27,1<<21,1<<21)
 WHEN 28:PROCsetstate(setup%,28,1<<21,1<<21)
 WHEN 29:PROCsetstate(setup%,29,1<<21,1<<21)
         PROCsetstate(setup%,30,0,1<<22)
 WHEN 38:PROCsetstate(setup%,38,1<<21,1<<21)
         PROCsetstate(setup%,2,1<<22,1<<22)
         SYS"Wimp_GetCaretPosition",,Q%
         IF!Q%=setup% AND Q%!4=2 SYS"Wimp_SetCaretPosition",-1
 WHEN 39:PROCsetstate(setup%,39,1<<21,1<<21)
         PROCsetstate(setup%,2,0,1<<22)
 ENDCASE
 IFI%=25 ORI%=26 ORI%=27 ORI%=28 THEN
  PROCsetstate(setup%,30,1<<22,1<<22)
  SYS"Wimp_GetCaretPosition",,Q%
  IF!Q%=setup% AND Q%!4=30 SYS"Wimp_SetCaretPosition",-1
 ENDIF
 IFI%=20 ORI%=21 ORI%=41 ORI%=42 ORI%=5 ORI%=7 ORI%=8 ORI%=10 ORI%=49 ORI%=50 THEN
  PROCvalidate_bst_alarms(3)
 ENDIF
 IFI%=47 ORI%=46 ORI%=44 ORI%=43 ORI%=12 ORI%=14 ORI%=15 ORI%=17 ORI%=51 ORI%=53 THEN
  PROCvalidate_bst_alarms(4)
 ENDIF
ENDPROC
:
DEFPROCenable_bst
 PROCsetstate(setup%,3,1<<21,1<<21)
 PROCsetstate(setup%,20,0,3<<21):PROCsetstate(setup%,21,0,3<<21):PROCsetstate(setup%,22,0,3<<21)
 PROCsetstate(setup%,41,0,3<<21):PROCsetstate(setup%,42,0,3<<21)
 PROCsetstate(setup%, 5,0,3<<21):PROCsetstate(setup%, 6,0,3<<21):PROCsetstate(setup%, 7,0,3<<21)
 PROCsetstate(setup%, 8,0,3<<21):PROCsetstate(setup%, 9,0,3<<21):PROCsetstate(setup%,10,0,3<<21)
 PROCsetstate(setup%,49,0,3<<21):PROCsetstate(setup%,48,0,3<<21):PROCsetstate(setup%,50,0,3<<21)
 PROCsetstate(setup%,47,0,3<<21):PROCsetstate(setup%,46,0,3<<21):PROCsetstate(setup%,45,0,3<<21)
 PROCsetstate(setup%,44,0,3<<21):PROCsetstate(setup%,43,0,3<<21)
 PROCsetstate(setup%,12,0,3<<21):PROCsetstate(setup%,13,0,3<<21):PROCsetstate(setup%,14,0,3<<21)
 PROCsetstate(setup%,15,0,3<<21):PROCsetstate(setup%,16,0,3<<21):PROCsetstate(setup%,17,0,3<<21)
 PROCsetstate(setup%,51,0,3<<21):PROCsetstate(setup%,52,0,3<<21):PROCsetstate(setup%,53,0,3<<21)
ENDPROC
:
DEFPROCdisable_bst
 PROCsetstate(setup%,3,0,1<<21)
 PROCsetstate(setup%,20,1<<22,3<<21):PROCsetstate(setup%,21,1<<22,3<<21):PROCsetstate(setup%,22,1<<22,3<<21)
 PROCsetstate(setup%,41,1<<22,3<<21):PROCsetstate(setup%,42,1<<22,3<<21)
 PROCsetstate(setup%, 5,1<<22,3<<21):PROCsetstate(setup%, 6,1<<22,3<<21):PROCsetstate(setup%, 7,1<<22,3<<21)
 PROCsetstate(setup%, 8,1<<22,3<<21):PROCsetstate(setup%, 9,1<<22,3<<21):PROCsetstate(setup%,10,1<<22,3<<21)
 PROCsetstate(setup%,49,1<<22,3<<21):PROCsetstate(setup%,48,1<<22,3<<21):PROCsetstate(setup%,50,1<<22,3<<21)
 PROCsetstate(setup%,47,1<<22,3<<21):PROCsetstate(setup%,46,1<<22,3<<21):PROCsetstate(setup%,45,1<<22,3<<21)
 PROCsetstate(setup%,44,1<<22,3<<21):PROCsetstate(setup%,43,1<<22,3<<21)
 PROCsetstate(setup%,12,1<<22,3<<21):PROCsetstate(setup%,13,1<<22,3<<21):PROCsetstate(setup%,14,1<<22,3<<21)
 PROCsetstate(setup%,15,1<<22,3<<21):PROCsetstate(setup%,16,1<<22,3<<21):PROCsetstate(setup%,17,1<<22,3<<21)
 PROCsetstate(setup%,51,1<<22,3<<21):PROCsetstate(setup%,52,1<<22,3<<21):PROCsetstate(setup%,53,1<<22,3<<21)
ENDPROC
:
DEFPROCok_save_option(P%)
 LOCAL j%,i%
 silent_alarm%=FNicon_set(setup%,0)
 fivedayweek%=FNicon_set(setup%,1)
 j%=0
 FORi%=0 TO 6
  IFFNicon_set(setup%,31+i%) j%+=(1<<i%)
 NEXT
 IFj%=0 THEN
  PROCok(FNmsg_0("OkayC9"))
 ELSE
  global_weekwork%=j%
 ENDIF
 IFFNicon_set(setup%,38) THEN
  global_timeout%=-1
 ELSE
  global_timeout%=VAL(FNread_string(setup%,2))
 ENDIF
 IFalarm_autosave%<>FNicon_set(setup%,19) THEN
  alarm_autosave%=FNicon_set(setup%,19)
  IFalarm_autosave% THEN
   REM changing from FALSE to TRUE, so save the database
   IFmodified% AND ra$<>"" PROCsave_alarms_to_disc(ra$,FALSE,TRUE,TRUE):autosaved%=FALSE
  ELSE
   REM changing from TRUE to FALSE, clear autosaved flag
   autosaved%=FALSE
  ENDIF
 ENDIF
 alarm_confirm%=FNicon_set(setup%,23)
 IFFNicon_set(setup%,3) THEN
  PROCset_bst_alarms
 ELSE
  PROCheap_free("ALRM",alarms%(3)):alarms%(3)=0
  PROCheap_free("ALRM",alarms%(4)):alarms%(4)=0
  IFbst_alarm_1% OR bst_alarm_2% OR bst_alarm_3% THEN
   IFbst_alarm_1% PROCremove_alarm_from_list(bst_alarm_1%,TRUE):bst_alarm_1%=0
   IFbst_alarm_2% PROCremove_alarm_from_list(bst_alarm_2%,TRUE):bst_alarm_2%=0
   IFbst_alarm_3% PROCremove_alarm_from_list(bst_alarm_3%,TRUE):bst_alarm_3%=0
   PROCmodified_alarm_database
  ENDIF
 ENDIF
 PROCreset_alarm_status
 IFFNicon_set(setup%,25) THEN
  IFformat%<>1 PROCset_format(1)
 ELSE
  IFFNicon_set(setup%,26) THEN
   IFformat%<>2 PROCset_format(2)
  ELSE
   IFFNicon_set(setup%,27) THEN
    IFformat%<>3 PROCset_format(3)
   ELSE
    IFFNicon_set(setup%,28) THEN
     IFformat%<>4 PROCset_format(4)
    ELSE
     IFFNicon_set(setup%,29) THEN
      IFformat%<>5 OR userformat$<>FNread_string(setup%,30) THEN
       userformat$=FNread_string(setup%,30)
       IFFNwidth(userformat$)>80 THEN
        PROCformat_error(FNmsg_0("FrmtA2"))
       ELSE
        IFFNwidth(userformat$)<1 THEN
         PROCformat_error(FNmsg_0("FrmtA3"))
        ELSE
         PROCset_format(5)
        ENDIF
       ENDIF
      ENDIF
     ENDIF
    ENDIF
   ENDIF
  ENDIF
 ENDIF
 REM only close the window if SELECT was used
 IFP%=1 THEN
  !Q%=setup%:SYS"Wimp_CloseWindow",,Q%
 ELSE
  REM need to reload the BST alarms
  PROCstartup_bst_alarms
 ENDIF
 PROCsave_config
ENDPROC
:
DEFPROCrefresh_window(H%,I%)
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCrefresh_window")
 IF H%=a_wind% THEN
  PROCset_string(H%,2,FNyear(I%))
  PROCset_string(H%,47,FNmonth(I%))
  PROCset_string(H%,46,FNdow(I%))
  PROCset_string(H%,7,FNday(I%))
  PROCset_string(H%,11,FNhour(I%))
  PROCset_string(H%,14,FNmin(I%))
  PROCset_string(H%,48,FNam(I%))
  IF H%=a_wind% THEN
 
   PROCalarm_rec_to_fivebt(I%,buffers%)
   ?cur_time% =3
   SYS"OS_Word",14,cur_time%
   REM zero out seconds, so difference seems sensible
   SYS"Territory_ConvertTimeToOrdinals",-1,cur_time%,cur_ordinals%
   cur_ordinals%!0 =0 :REM cs
   cur_ordinals%!4 =0 :REM s
   SYS"Territory_ConvertOrdinalsToTime",-1,cur_time%,cur_ordinals%
 
   PROCtime_diff(cur_time%,buffers%,sign%,yr_dif%,day_dif%,hr_dif%,min_dif%)
 
   IF sign% =-1 THEN PROCset_string(H%,53,"-") ELSE PROCset_string(H%,53,"+")
 
   PROCset_string(H%,51,STR$(yr_dif%))
   PROCset_string(H%,52,STR$(day_dif%))
   PROCset_string(H%,50,STR$(hr_dif%))
   PROCset_string(H%,49,RIGHT$("0"+STR$(min_dif%),2))
  ENDIF
 ELSE
  REM refresh setup dialogue
  IFI%=alarms%(3) THEN
   PROCset_string(setup%,22,FNtime(I%))
   PROCset_string(setup%,6,FNdate(I%))
   PROCset_string(setup%,9,FNmonth(I%))
   PROCset_string(setup%,48,FNyear(I%))
  ELSE
   PROCset_string(setup%,45,FNtime(I%))
   PROCset_string(setup%,13,FNdate(I%))
   PROCset_string(setup%,16,FNmonth(I%))
   PROCset_string(setup%,52,FNyear(I%))
  ENDIF
 ENDIF
ENDPROC

REM *************************************************************************
REM Browser window
REM *************************************************************************

DEFPROCopen_browser
 LOCAL Y%,X%,W%,s$
 !Q%=browser%:SYS"Wimp_GetWindowInfo",,Q%
 !Q1%=browser%:SYS"Wimp_CloseWindow",,Q1%
 !Q1%=browse1%:SYS"Wimp_CloseWindow",,Q1%
 s$=$(Q%!76)
 IFmodified% THEN
  IFRIGHT$(s$,1)<>"*" s$+=" *"
 ELSE
  IFRIGHT$(s$,1)="*" s$=LEFT$(s$,LEN(s$)-2)
 ENDIF
 $(Q%!76)=s$
 IF(Q%!32 AND (1<<16))=0 THEN
  REM window was already closed,
  REM so we can quite happily move it
  !Q1%=-2
  SYS"Wimp_GetWindowState",,Q1%
  Y%=Q1%!4-Q1%!20
  !Q1%=-2:Q1%!4=ictime%
  SYS"Wimp_GetIconState",,Q1%
  X%=Y%+Q1%!16-820
  IFalarm_count%=0 THEN
   Y%=48+52
  ELSE
   IFalarm_count%>20 THEN
    Y%=20*48+52
   ELSE
    Y%=alarm_count%*48+52
   ENDIF
  ENDIF
  Q%!12=(Q%!12-Q%!4)+X%
  Q%!16=Y%+172
  Q%!8=172
  Q%!4=X%
  Q%!20=0
  Q%!24=0
 ELSE
  PROCtell_pinboard(browser%)
 ENDIF
 REM we want to force it to the top
 Q%!28=-1
 SYS"Wimp_OpenWindow",,Q%
 PROCopen_top_pane(Q%,browse1%)
ENDPROC
:
DEFPROCadjust_browser_size
 LOCAL l%,x%,p%,n%
 REM first of all, zip through the list, counting the number of alarms
 REM and working out how wide the window is going to be
 alarm_count%=0
 p%=alarm_head%
 WHILE p%
  REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCadjust_browser_size")
  alarm_count%+=1
  IFp%?alarm_taskalarm% THEN
   l%=LEN(FNmsg_1("BrwsA1", $(p%+alarm_line1%)+$(p%+alarm_line2%)+$(p%+alarm_line3%)))
  ELSE
   IFp%?alarm_applalarm% THEN
    l%=LEN(FNmsg_1("BrwsA5", $(p%+alarm_line1%)))
   ELSE
    l%=LEN($(p%+alarm_line1%))
    IF$(p%+alarm_line2%)<>"" l%+=1+LEN($(p%+alarm_line2%))
    IF$(p%+alarm_line3%)<>"" l%+=1+LEN($(p%+alarm_line3%))
   ENDIF
  ENDIF
  IFl%>x% x%=l%
  p%=p%!alarm_next%
 ENDWHILE
 x%+=30:REM date and time bit
 IFx%<70 x%=70
 x%=x%*16+16
 assembler%!16=x%
 n%=alarm_count%*48
 n%=-(n%+52)
 !Q%=0:Q%!4=n%:Q%!8=x%:Q%!12=0:SYS"Wimp_SetExtent",browser%,Q%
 !Q%=0:Q%!4=-52:Q%!8=x%:Q%!12=0:SYS"Wimp_SetExtent",browse1%,Q%
ENDPROC
:
DEFPROCcheck_browser(B%,Y%)
 LOCAL i%
 i%=FNalarm_hit(Y%)
 IFi% THEN
  REM IFFNcheck_pointer PROCcheck_pointer(i%,"PROCcheck_browser")
  IFi%?alarm_applalarm% i%=0
 ENDIF
 CASE B% OF
 WHEN 1024:IFi% THEN
            IFi%?alarm_selected%=0 THEN
             PROCunset_alarms_selection
             i%?alarm_selected%=1
             PROCredraw_alarm(i%)
            ENDIF
           ELSE
            IFFNalarm_selection_count PROCunset_alarms_selection
           ENDIF
 WHEN  256:IFi% THEN
            i%?alarm_selected%=1-i%?alarm_selected%
            PROCredraw_alarm(i%)
           ENDIF
 WHEN    4:IF current_action%=changing% PROCfront(a_wind%):PROCok(FNmsg_0("OkayA2"))
           IF current_action%=setting% PROCfront(a_wind%):PROCok(FNmsg_0("OkayA4"))
           i%=alarm_head%
           WHILE i%
            IFi%?alarm_selected% THEN
             i%?alarm_selected%=0
             PROCredraw_alarm(i%)
             PROCichang(i%)
             i%=0
            ELSE
             i%=i%!alarm_next%
            ENDIF
           ENDWHILE
 ENDCASE
ENDPROC

REM *************************************************************************
REM Menus
REM *************************************************************************

DEFPROCdomenu(h%,x%,y%)
 LOCAL m1%,m2%,m3%,m4%,m5%,s$,t$
 menufree%=menuend%-&440
 menu_curws%=menu_ws%
 menudata%=0
 menuhand%=h%
 menux%=x%
 menuy%=y%
 CASE h% OF
 WHEN 0:REM icon menu
        menudata%=FNcrmenu(FNmsg_0("MenuMM"))
        PROCattach(menudata%,0,info%,TRUE)
        IF NOT FNgot_time_setup THEN PROCset_shade(menudata%,3,1)
 WHEN 1:REM browser menu
        m3%=FNalarm_selection_count
        IFm3%<>2 THEN
         s$="BrwsM5":t$="BrwsM6"
        ELSE
         s$="BrwsM3":t$="BrwsM4"
        ENDIF
 
        menudata%=FNcrmenu(FNmsg_1("BrwsM1",FNmsg_0(s$)))
        m1%=FNcrmenu(FNmsg_2("BrwsM2",FNmsg_0(s$),FNmsg_0(t$)))
        PROCattach(menudata%,1,m1%,TRUE)
          PROCattach(m1%,3,save%,FALSE)
          PROCattach(m1%,4,save%,FALSE)
        PROCattach(menudata%,4,save%,FALSE)
        PROCattach(menudata%,5,save%,FALSE)
 
        IFm3%=0 THEN
         m3%=FNalarm_hit(menuy%)
         REM ^^^^^^^^ need to allow for the adjustment factor
         REM no longer, menu is now style guide compliant
         IFm3% THEN
          REM IFFNcheck_pointer PROCcheck_pointer(m3%, "PROCdomenu(m3%)")
          IFm3%?alarm_applalarm%=0 THEN
           m3%?alarm_selected%=1
           PROCredraw_alarm(m3%)
          ELSE
           m3%=0
          ENDIF
         ENDIF
         IFm3%=0 THEN
          PROCset_shade(menudata%,1,1)
          PROCset_shade(m1%,0,1)
          PROCset_shade(m1%,1,1)
          PROCset_shade(m1%,2,1)
          PROCset_shade(m1%,3,1)
          PROCset_shade(m1%,4,1)
          PROCset_shade(menudata%,3,1)
         ENDIF
        ENDIF
 
        IF current_action%<>-1 THEN
         PROCset_shade(menudata%,0,1)
         PROCset_shade(menudata%,1,1)
         PROCset_shade(m1%,0,1)
         PROCset_shade(m1%,1,1)
         PROCset_shade(m1%,2,1)
         PROCset_shade(m1%,3,1)
         PROCset_shade(m1%,4,1)
         PROCset_shade(menudata%,4,1)
         PROCset_shade(menudata%,5,1)
        ENDIF
 
        IF alarm_head%=0 THEN
         REM this will catch the final case of
         REM no alarms existing
         PROCset_shade(menudata%,2,1)
         PROCset_shade(menudata%,4,1)
        ENDIF
 WHEN 2:REM message window menu
        menudata%=FNcrmenu(FNmsg_0("MenuAL"))
        m1%=FNcrmenu(FNmsg_0("MenuD2"))
        PROCattach(menudata%,2,m1%,TRUE)
        m2%=FNcrmenu(FNmsg_0("MenuD1"))
        PROCattach(m1%,0,m2%,TRUE)
        PROCattach(m1%,1,m2%,TRUE)
        PROCattach(m1%,2,m2%,TRUE)
        PROCattach(m1%,3,m2%,TRUE)
        PROCattach(m1%,4,m2%,TRUE)
        PROCattach(m1%,5,m2%,TRUE)
        PROCwriteable(m2%,0,deftime%,4)

        REM Better check this menu is indirect before we trample all
        REM over it to give it some validation
    
        $validation_buffer% = "A0-9"+CHR$0
        !(m2% + 28 + (24 * 0) + 16) = validation_buffer%

        REM Sodding wimp... We disown the caret here if the change alarm
        REM window is open. Otherwise, if we defer an alarm, the wimp steals
        REM the caret from the change alarm window. We then go, "Ah, our alarm
        REM has been altered, close the change alarm window". We the close
        REM the menu tree, and the wimp tries to give the input focus back
        REM to the change alarm window. BOOM.

        IF current_action% <> setting% THEN
            SYS"Wimp_SetCaretPosition", -1, -1
        ENDIF
 WHEN 3:menudata%=FNcrmenu(FNmsg_0("MenuFI"))
        IFcurrent_action%=setting% THEN
         PROCset_shade(menudata%,0,1)
         PROCset_shade(menudata%,1,1)
        ELSE
         h%=alarms%(0):PROCread_prev_alarm(h%)
         IF h%=0 PROCset_shade(menudata%,0,1)
         h%=alarms%(0):PROCread_next_alarm(h%)
         IF h%=0 PROCset_shade(menudata%,1,1)
        ENDIF
 ENDCASE
 IFmenudata% SYS"Wimp_CreateMenu",,menudata%,menux%,menuy%
ENDPROC
