REM Copyright 2012 Castle Technology Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM
REM > Main

ON ERROR ERROR EXT ERR,LEFT$(REPORT$,240) +" ("+STR$(ERL)+")"
PROCinitialise
SYS"OS_ReadMonotonicTime" TO timex%:timex%+=100

WHILE TRUE
 err% =FALSE
 ON ERROR LOCAL :err% =TRUE
      
 IF err% =TRUE THEN
  ON ERROR :ON ERROR OFF :ERROR ERR,LEFT$(REPORT$,240) +" ("+STR$(ERL)+")"
  PROCerr_report(ERR,REPORT$,%11)
 ELSE 
  SYS"XWimp_PollIdle",0,Q%,timex% TO A%
  CASE A% OF
  WHEN 0    :PROCnudge
  WHEN 1    :PROCredraw_browser
  WHEN 2    :PROCopenwindow
  WHEN 3    :cancel%=TRUE
             PROCclosewindow(!Q%)
  WHEN 5    :IF !Q%=m_wind% THEN
              IF alarm_counter%=0 THENPROCset_timex_for_next_second
              alarm_counter%=global_timeout%
             ENDIF
  WHEN 6    :PROCfix_click(Q%)
             PROCcheckmouse(!Q%,Q%!4,Q%!8,Q%!12,Q%!16)
  WHEN 7    :PROCdecodedrag
  WHEN 8    :CASE TRUE OF
             WHEN FNfix_key(Q%),FNkey(!Q%,Q%!4,Q%!24)
             OTHERWISE
              SYS"Wimp_ProcessKey",Q%!24
             ENDCASE
  WHEN 9    :PROCmenuselect(Q%)
  WHEN 17,18:PROCreceive(A%)
  WHEN 19   :PROCacknowledge
  ENDCASE
 ENDIF
ENDWHILE
END

REM *************************************************************************
REM Initialisation
REM *************************************************************************

DEFPROCinitialise
 PROCmsg_init("Alarm:Messages")
 PROCinit_constants
 
 REM This has to be declared here because the increased use
 REM of messages has meant that this block is now use
 REM practically everywhere
 REM Because it is also used for loading templates into (temporarily)
 REM we must make sure that it is big enough for the largest template
 REM we are going to load, hence FNQsize.
 DIM Q% FNQsize
 
 PROCinit_heap_constants
 PROCinit_arrays
 PROCinit_date_and_time
 PROCinit_task
 PROCinit_templates
 PROCinit_globals
 PROCinit_config
 PROCinit_codevar
 PROCinit_timediff
 PROCload_alarms_into_memory(ra$)
ENDPROC
:
DEFPROCinit_date_and_time
 width_am%=0
 width_we%=1
 width_w3%=2
 width_dy%=3
 width_st%=4
 width_mo%=5
 width_m3%=6
 width_tz%=7
 DIM widths%(7)
 ?cur_clock%=3:SYS"OS_Word",14,cur_clock%
 SYS"Territory_ReadCalendarInformation",-1,cur_clock%,Q2%
 widths%(width_am%)=Q2%!16
 widths%(width_we%)=Q2%!20
 widths%(width_w3%)=Q2%!24
 widths%(width_dy%)=Q2%!28
 widths%(width_st%)=Q2%!32
 widths%(width_mo%)=Q2%!36
 widths%(width_m3%)=Q2%!40
 widths%(width_tz%)=Q2%!44
ENDPROC
:
DEFPROCinit_task
 LOCAL E%,length%,s$
 task_id$=FNmsg_0("TaskID")
 REM define the block of messages wanted by Alarm
 Q%!0=2       :REM Message_DataSaveAck
 Q%!4=3       :REM Message_DataLoad
 Q%!8=5       :REM Message_DataOpen
 Q%!12=8      :REM Message_PreQuit
 Q%!16=10     :REM Message_SaveDesktop
 Q%!20=&500   :REM Message_AlarmSet
 Q%!24=&501   :REM Message_AlarmGoneOff
 Q%!28=&502   :REM Message_HelpRequest
 Q%!32=&400C0 :REM Message_MenuWarning
 Q%!36=&400C1 :REM Message_ModeChange
 Q%!40=&400C2 :REM Message_TaskInitialise
 Q%!44=&400C9 :REM Message_MenusDeleted
 Q%!48=&400CF :REM Message_FontChanged
 Q%!52=0
 SYS"Wimp_Initialise",380,&4B534154,task_id$,Q% TO wimpversion%,taskid%
 REM work out whether or not a filename was provided on the command line
 SYS"OS_GetEnv" TO E%
 SYS"OS_ReadArgs","/g,quit/s,/g,/g",E%,Q%,2048
 E%=Q%!12
 s$=""
 IFE% THEN
  REM The filename is present
  length%=!E% AND &FFFF
  E%+=2
  WHILE length%
   s$+=CHR$(?E%)
   E%+=1
   length%-=1
  ENDWHILE
 ENDIF
 IFs$<>"" THENra$=s$

 REM Try loading the browser redraw code
 SYS"OS_File",17,"Alarm:Code" TO t%,,,,I%
 IFt%<>1 PROCok(FNmsg_0("OkayD1"))
 DIM assembler% I%
 SYS"OS_File",16,"Alarm:Code",assembler%,&80000000:REM Use R2 address and flush I cache
ENDPROC
:
DEFPROCinit_heap_constants
 LOCAL ws%
 ws%=0
 REM WARNING!
 REM If you make ANY changes to the following workspace usage,
 REM it must be mirrored in the browser source code
 alarm_next%       =FNws_claim(ws%,4)  :REM ptr to next alarm in this linked list
 alarm_prev%       =FNws_claim(ws%,4)  :REM ptr to previous alarm in list
 alarm_fileptr%    =FNws_claim(ws%,4)  :REM ptr to alarm in data file
 alarm_year%       =FNws_claim(ws%,4)  :REM *local* year for alarm to go off on
 alarm_month%      =FNws_claim(ws%,4)  :REM *local* month for alarm to go off on
 alarm_date%       =FNws_claim(ws%,4)  :REM *local* date for alarm to go off on
 alarm_hours%      =FNws_claim(ws%,4)  :REM *local* hours for alarm to go off on
 alarm_minutes%    =FNws_claim(ws%,4)  :REM *local* minutes for alarm to go off on
 valid_year%       =FNws_claim(ws%,4)  :REM validated *local* year for alarm to go off on
 valid_month%      =FNws_claim(ws%,4)  :REM validated *local* month for alarm to go off on
 valid_date%       =FNws_claim(ws%,4)  :REM validated *local* date for alarm to go off on
 valid_hours%      =FNws_claim(ws%,4)  :REM validated *local* hours for alarm to go off on
 valid_minutes%    =FNws_claim(ws%,4)  :REM validated *local* minutes for alarm to go off on
 alarm_line1%      =FNws_claim(ws%,41) :REM line 1 of the alarm text
 alarm_line2%      =FNws_claim(ws%,41) :REM line 2 of the alarm text
 alarm_line3%      =FNws_claim(ws%,41) :REM line 3 of the alarm text
 alarm_repeating%  =FNws_claim(ws%,1)  :REM is this a repeating alarm?
 alarm_repeat_rate%=FNws_claim(ws%,1)  :REM repeat rate for this alarm
 alarm_repeat_mult%=FNws_claim(ws%,1)  :REM repeat multiplier for this alarm
 alarm_urgent%     =FNws_claim(ws%,1)  :REM is this an urgent alarm?
 alarm_applalarm%  =FNws_claim(ws%,1)  :REM is this an application alarm?
 alarm_taskalarm%  =FNws_claim(ws%,1)  :REM is this a task alarm?
 alarm_fvdywk%     =FNws_claim(ws%,1)  :REM does this alarm fit into a working week?
 alarm_selected%   =FNws_claim(ws%,1)  :REM has this alarm been selected on the viewer?
 alarm_SIZE%       =FNws_claim(ws%,1)

 SYS"OS_ReadMemMapInfo" TO heap_psize%
 SYS"OS_GetEnv" TO ,heap_start%
 heap_size%=0
ENDPROC
:
DEFPROCinit_config
 LOCAL i%,j%
 SYS"OS_Byte",161,&DC TO ,,i%
 IF(i% AND %111)=0 i%=%00001001
 format%        =(i% AND %111)
 alarm_confirm% =((i% AND %1000)<>0)
 alarm_autosave%=((i% AND %10000)<>0)
 fivedayweek%   =((i% AND %100000)<>0)
 silent_alarm%  =((i% AND %1000000)<>0)
 alarm_in_dst%  =((i% AND %10000000)<>0)
 $Q1%=FNread_system_string("Alarm$Options","")
 REM format is -timeout value -weekwork days -format string
 SYS"XOS_ReadArgs","timeout/k,weekwork/k,format/k",Q1%,Q%,2048 TO ;i%
 IF(i% AND 1) THEN !Q%=0:Q%!4=0:Q%!8=0

 REM Timeout
 IFQ%!0 THEN
  global_timeout%=VAL(FNrtoz(!Q%))
 ELSE
  global_timeout%=10
 ENDIF

 REM Working week
 IFQ%!4 THEN
  global_weekwork%=VAL(FNrtoz(Q%!4))
 ELSE
  ?cur_clock%=3:SYS"OS_Word",14,cur_clock%
  SYS"Territory_ReadCalendarInformation",-1,cur_clock%,Q2%
  global_weekwork%=0
  FORi%=1 TO 7
   IFi%>=Q2%!0 AND i%<=Q2%!4 global_weekwork%+=(1<<(i%-1))
  NEXT
 ENDIF

 REM User format
 IFQ%!8 THEN
  PROCset_string(setup%,30,FNrtoz(Q%!8))
 ELSE
  PROCset_string(setup%,30,"%z12:%mi:%se %pm. %zdy/%zmn/%yr")
 ENDIF

 REM Timeout
 IFglobal_timeout%=-1 THEN
  PROCset_string(setup%,2,"10")
  PROCsetstate(setup%,38,1<<21,1<<21)
  PROCsetstate(setup%,39,0,1<<21)
 ELSE
  PROCset_string(setup%,2,STR$(global_timeout%))
  PROCsetstate(setup%,38,0,1<<21)
  PROCsetstate(setup%,39,1<<21,1<<21)
 ENDIF
 alarm_counter%=global_timeout%

 REM Working week
 j%=global_weekwork%
 FORi%=1 TO 7
  IF(j% AND 1) THEN
   PROCsetstate(setup%,30+i%,1<<21,1<<21)
  ELSE
   PROCsetstate(setup%,30+i%,0,1<<21)
  ENDIF
  j%=j%>>1
 NEXT

 REM User format
 userformat$=FNread_string(setup%,30)
 PROCset_format(format%)
ENDPROC
:
DEFPROCinit_globals
 LOCAL f%
 SYS"OS_Byte",161,&1C TO ,,f%
 IF(f% AND 2)=0 THEN
  REM CMOS has turned DragASprite off
  save_start%=-1
  save_stop%=-1
 ELSE
  REM Use DragASprite if available
  SYS"XOS_SWINumberFromString",,"DragASprite_Start" TO save_start%;f%
  IF(f% AND 1) save_start%=-1
  SYS"XOS_SWINumberFromString",,"DragASprite_Stop" TO save_stop%;f%
  IF(f% AND 1) save_stop%=-1
 ENDIF
 menuhand%=-1
 current_action%=-1
 setclock_action%=-1
 cancel%=FALSE
 modified%=FALSE
 autosaved%=FALSE
 doing_deleting%=FALSE
 doing_shutdown%=0
 ictime%=-1
 alarm_head%=0
 alarm_count%=0
 alarm_set%=FALSE
 user_alarm_set%=FALSE
 alarm_original_pointer%=0
 alarm_warned%=FALSE
 bst_alarm_1%=0
 bst_alarm_2%=0
 bst_alarm_3%=0
 timex%=0
 cur_textlen% =0
 cur_format$ =""
 spr_area% =0
ENDPROC
:
DEFPROCinit_codevar
 LOCAL len%,R%,P%,free_code%,buffer%,end_code%
 SYS"XOS_ReadVarVal","Alarm$Free",0,-1,0 TO ,,len%
 IF len% < 0 THEN
  REM Already defined, don't recreate it
 ELSE
  FOR R% =0 TO 2 STEP 2
  P% =Q%
  [OPT R%
  .free_code%
   MOV pc,r14 ;no write
   STMFD r13!,{r14}
 
   MVN r0,#0 ;=-1
   MVN r1,#0 ;=-1
   SWI "XWimp_SlotSize"
 
   MOV r0,r2
   ADR r1,buffer%
   MOV r2,#16
   SWI "XOS_ConvertFileSize"
 
   SUB r2,r1,r0 ;len =term -buf start
   LDMFD r13!,{pc}
  .buffer%
   EQUS STRING$(16,"*")
   ALIGN
  .end_code%
  ]
  NEXT
  SYS"OS_SetVarVal","Alarm$Free",free_code%,end_code%-free_code%,0,16
ENDIF  
ENDPROC
:
DEFPROCinit_templates
 LOCAL ind%

 REM Readability of icon numbers
 ic_warning_discard%=2
 ic_warning_save%=3

 PROCopen_templates
 
 REM we fix 4 dialogue windows
 PROCfix_init(4)
 
 a_wind% =FNload_template("alarm")
 PROCfix_dialogue(a_wind%,FNmsg_0("Fix00"),FNmsg_0("Fix10"),"","")
 c_wind% =FNload_template("clock")
 PROCfix_dialogue(c_wind%,FNmsg_0("Fix01"),FNmsg_0("Fix10"),"","")
 m_wind% =FNload_template("message")
 PROCfix_dialogue(m_wind%,"NotUsed!",FNmsg_0("Fix11"),"","")
 setup% =FNload_template("setup")
 PROCfix_dialogue(setup%,FNmsg_0("Fix01"),FNmsg_0("Fix10"),FNmsg_0("SHlpIA"),FNmsg_0("SHlpIB"))
 info% =FNload_template("info")
 browser% =FNload_template("browser")
 browse1% =FNload_template("browse1")
 warning% =FNload_template("warning")
 deleting% =FNload_template("deleting")
 bstwarn% =FNload_template("outofdates")
 
 save% =FNload_template("save")
 !Q% =save%
 Q%!4 =2
 SYS"Wimp_GetIconState",,Q%
 filename%=Q%!28
 
 slow% =FNload_template("slow")
 
 SYS"Wimp_CloseTemplate"
 
 PROCset_string(info%,3,FNmsg_0("_Version"))

 !Q%=browser%:Q%!4=2:SYS"Wimp_GetIconState",,Q%:SYS"Wimp_DeleteIcon",,Q%
 assembler%!4=Q%!16:REM right hand end of day icon
 !Q%=browser%:Q%!4=0:SYS"Wimp_GetIconState",,Q%:SYS"Wimp_DeleteIcon",,Q%
 assembler%!8=Q%!16:REM right hand end of date icon
 !Q%=browser%:Q%!4=1:SYS"Wimp_GetIconState",,Q%:SYS"Wimp_DeleteIcon",,Q%
 assembler%!12=Q%!16:REM right hand end of time icon
ENDPROC
:
DEFPROCinit_constants
 LOCAL I%,J%
 def_fn$="Choices:Alarm.Alarms"
 ra$=def_fn$
 setting%=0
 changing%=2
 finding%=3
 clocking%=4
 mess1%=16
 mess2%=17
 mess3%=18
 errok%=1
 errfatal%=3
ENDPROC
:
DEFPROCinit_arrays
 LOCAL I%,t%
 REM Various alarm pointers are used:
 REM 0 : alarm currently being modified by the user
 REM 1 : alarm currently being monitored by !Alarm
 REM 2 : general scratch pointer
 REM 3 : bst copy alarm 1
 REM 4 : bst copy alarm 2
 DIM alarms%(4)
 DIM sin(59),cos(59)
 DIM Q1% 1024
 DIM Q2% 1024
 DIM cur_clock% 6
 DIM deftime% 5
 DIM buffers% 64
 DIM menufree% 256:menuend%=menufree%+256
 DIM validation_buffer% 64
 DIM menu_ws% 256:menu_curws%=menu_ws%:menu_maxws%=256

 REM Need to claim one block of an alarm record
 REM for the clock setting
 DIM t% alarm_SIZE%:alarms%(2)=t%

 REM Build some angles lookup tables
 FOR I%=0 TO 59
  sin(I%)=SINRAD(I%*6)
  cos(I%)=COSRAD(I%*6)
 NEXT
ENDPROC
:
REM *************************************************************************
REM Poll code handlers
REM *************************************************************************

DEFPROCnudge
 LOCAL U%
 PROCgettime
 PROCredraw_icon(-1,ictime%)
 IF alarm_set% THEN
  REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCnudge(1)")
  U%=alarm_urgent%?alarms%(1)
  IF NOT(alarm_detected%) PROCcheck_date_and_time(U%)
  IF FNalarm_sounding(U%) THEN
   VDU 7
   IF alarm_counter%>0 alarm_counter%-=1
  ENDIF
 ENDIF
 IF secs_used% OR FNalarm_sounding(U%) THEN
  PROCset_timex_for_next_second
 ELSE
  SYS"OS_ReadMonotonicTime" TO timeslip%
  U%=VAL(FNconverttime(cur_clock%,"%SE"))
  timeslip%-=timex%
  timex%+=timeslip% - (timeslip% MOD 100) + 100*(60-U%)
 ENDIF
ENDPROC
:
DEFPROCredraw_browser
 LOCAL A%,B%,C%,D%,more%
 SYS"Wimp_RedrawWindow",,Q% TO more%
 A%=more%
 B%=Q%
 C%=alarm_head%
 D%=msg_desc%
 CALLassembler%
ENDPROC
:
DEFPROCopenwindow
REM task_buff%  = original open window block
REM Q1% = pane window state block
REM Q2% = edit window state block
IF!Q%=browser% THEN
 REM get current state of pane window
 !Q1%=browse1%:SYS"Wimp_GetWindowState",,Q1%
 REM if edit window is above pane window, open the
 REM edit window behind it
 IF Q1%!28 = Q%!28 Q%!28=browse1%
 REM get current state of edit window
 !Q2%=browser%:SYS"Wimp_GetWindowState",,Q2%
 REM if edit window is moving in the direction of
 REM the pane window, open the pane first
 SYS"Wimp_OpenWindow",,Q%:REM open window & get updated coordinates
 IF Q%!28=-2 THEN
  !Q2%=browser%:SYS"Wimp_GetWindowState",,Q2%
  Q%!28=Q2%!28
 ENDIF
 PROCopen_top_pane(Q%,browse1%)
ELSE
 IF!Q%<>browse1% SYS"Wimp_OpenWindow",,Q%
ENDIF
ENDPROC
:
DEFPROCclosewindow(H%)
 LOCAL error%
 !Q%=H%:PROCtell_pinboard(H%)
 SYS"Wimp_CloseWindow",,Q%
 IF H%=browser% !Q%=browse1%:SYS"Wimp_CloseWindow",,Q%
 IF H%=setup% THEN
  PROCheap_free("ALRM",alarms%(3)):alarms%(3)=0
  PROCheap_free("ALRM",alarms%(4)):alarms%(4)=0
 ENDIF
 IF H%=c_wind% setclock_action%=-1
 IF H%=a_wind% THEN
  REM following bit relies on the fact that
  REM alarm_original_pointer% and alarms%(1) are pointing
  REM to the correct records!
  IF alarm_original_pointer%<>0 AND alarms%(1)<>0 THEN
   REM IFFNcheck_pointer PROCcheck_pointer(alarm_original_pointer%,"PROCclosewindow(alarm_original_pointer%)")
   REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCclosewindow(1)")
   IF (alarm_original_pointer%=alarms%(1)) AND NOT(cancel%) THEN
    !Q%=m_wind%
    SYS"Wimp_CloseWindow",,Q%
   ENDIF
  ENDIF
  IF current_action%<>-1 PROCcancel_current_action
  IFsetclock_action%=finding% PROCclosewindow(c_wind%)
 ENDIF
 IF H%=m_wind% THEN
  REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCclosewindow(1)")
  REM following bit relies on the fact that
  REM alarm_original_pointer% and alarms%(1) are pointing
  REM to the correct records!
  IF alarm_original_pointer%<>0 AND alarms%(1)<>0 THEN
   REM IFFNcheck_pointer PROCcheck_pointer(alarm_original_pointer%,"PROCclosewindow(alarm_original_pointer%)")
   IF (alarm_original_pointer%=alarms%(1)) AND current_action%<>setting% THEN
    !Q%=a_wind%
    SYS"Wimp_CloseWindow",,Q%
    PROCcancel_current_action
   ENDIF
  ENDIF
  IF alarm_repeating%?alarms%(1) THEN
   PROCremove_alarm_from_list(alarms%(1),FALSE)
   PROCsave_repeating_alarm(alarms%(1),alarm_repeat_rate%?alarms%(1),alarm_repeat_mult%?alarms%(1),error%)
  ELSE
   PROCremove_alarm_from_list(alarms%(1),TRUE)
   PROCheap_free("ALRM",alarms%(1))
   alarms%(1)=0
   PROCmodified_alarm_database
  ENDIF
  alarm_warned%=FALSE
  PROCreset_alarm_status
  IFerror% PROCok(FNmsg_0("OkayC3"))
 ENDIF
 cancel%=FALSE
ENDPROC
:
DEFPROCcheckmouse(X%,Y%,B%,H%,I%)
 LOCAL d$,m$,y$,h$,i$,P%,M%
 CASE B% OF
  WHEN&400: IFH%=browser% PROCcheck_browser(B%,Y%)
  WHEN&100: IFH%=browser% PROCcheck_browser(B%,Y%)
  WHEN &40: IFH%=save% PROCdragicon(X%,Y%,H%,I%)
  WHEN   2: CASE H% OF
             WHEN       -2: PROCdomenu(0,X%-64,316)
             WHEN browser%: PROCdomenu(1,X%-64,Y%)
             WHEN browse1%: PROCdomenu(1,X%-64,Y%)
             WHEN  m_wind%: $deftime%="1"
                            PROCdomenu(2,X%-64,Y%)
             WHEN  a_wind%: PROCdomenu(3,X%-64,Y%)
            ENDCASE
  WHEN   4: CASE H% OF
             WHEN       -2: IFcurrent_action%=setting% PROCfront(a_wind%):PROCok(FNmsg_0("OkayB6"))
                            IFcurrent_action%=changing% PROCfront(a_wind%):PROCok(FNmsg_0("OkayB8"))
                            PROCuser_set_an_alarm
             WHEN browser%: PROCcheck_browser(B%,Y%)
             WHEN  c_wind%: PROCcheck_clock_window(1,-1,H%,I%)
             WHEN  a_wind%: PROCcheck_alarm_window(1,-1,H%,I%)
             WHEN   setup%: PROCcheck_setup_window(1,-1,I%)
             WHEN bstwarn%: SYS"Wimp_CreateMenu",,-1
                            IFI%=2 PROCopen_setup
             WHEN warning%: SYS"Wimp_CreateMenu",,-1
                            SYS"Wimp_SetCaretPosition",-1,-1
                            REM Quit
                            IFI%=ic_warning_discard% THEN
                             modified%=FALSE
                             IFdoing_shutdown%=2 THEN
                              SYS"Wimp_ProcessKey",&1FC
                             ELSE
                              PROCshutdown
                             ENDIF
                            ENDIF
                            REM Save and quit
                            IFI%=ic_warning_save% THEN
                             IFdoing_shutdown%=2 THEN
                              REM global shutdown asked for
                              doing_shutdown%=3
                             ELSE
                              doing_shutdown%=1
                             ENDIF
                             PROCsave_setup(&AE9,0,4,ra$)
                             SYS"Wimp_CreateMenu",,save%,X%,Y%
                            ENDIF
             WHENdeleting%: SYS"Wimp_CreateMenu",,-1
                            IFI%=1 PROCdelete_alarms
             WHEN    save%: IF I%=0 THEN
                             PROCsavefile(TRUE,$filename%,FALSE)
                             ENDPROC
                            ENDIF
            ENDCASE
  WHEN   1: CASE H% OF
             WHEN       -2: PROCunset_alarms_selection:PROCopen_browser
             WHEN browser%: PROCcheck_browser(B%,Y%)
             WHEN  c_wind%: PROCcheck_clock_window(-1,1,H%,I%)
             WHEN  a_wind%: PROCcheck_alarm_window(-1,1,H%,I%)
             WHEN   setup%: PROCcheck_setup_window(-1,1,I%)
             WHEN    save%: IF I%=0 THEN
                             PROCsavefile(TRUE,$filename%,TRUE)
                             ENDPROC
                            ENDIF
            ENDCASE
 ENDCASE
ENDPROC
:
DEFPROCdecodedrag
 LOCAL h%,i%,mx%,my%,ft%
 IFsave_stop%<>-1 SYS save_stop%
 SYS"Wimp_GetPointerInfo",,Q%
 mx%=!Q%
 my%=Q%!4
 h%=Q%!12
 i%=Q%!16
 IF h%=save% ENDPROC
 PROCdrag_savefile(h%,i%,mx%,my%)
ENDPROC
:
DEFPROCmenuselect(menus%)
 LOCAL C%,D%,got_adjust%,ftype%,found%,con%,null%,taskname$
 SYS"Wimp_GetPointerInfo",,buffers%
 IF (buffers%!8 AND 1) AND menuhand%<>2 got_adjust%=TRUE ELSE got_adjust%=FALSE
 CASE menuhand% OF
 WHEN 0: REM icon menu
         CASE !menus% OF
          WHEN 1:PROCunset_alarms_selection:PROCopen_browser
          WHEN 2:PROCopen_setup
          WHEN 3:SYS"XOS_File",23,"BootResources:Configure.!TimeSetup" TO ,,,,,,ftype%
                 IF ftype% =8192 THEN
                  found% =FALSE
                  con% =0
                  WHILE FNenum_tasks(con%,null%,taskname$,null%,null%)
                   IF taskname$ ="TimeSetup" THEN found% =TRUE
                  ENDWHILE
  
                  IF NOT found% THEN SYS"XWimp_StartTask","/BootResources:Configure.!TimeSetup"
                 ELSE
                  setclock_action%=clocking%
                  PROCread_date_and_time(alarms%(2))
                  PROCsetstate(c_wind%,15,0,1<<23):REM "undelete" the icon
                  SYS"Territory_ReadTimeZones",-1 TO ,C%
                  PROCset_string(c_wind%,15,FNrtoz(C%))
                  SYS"OS_Byte",161,&DC TO ,,C%
                  alarm_in_dst%=((C% AND %10000000)<>0)
                  IFalarm_in_dst% PROCsetstate(c_wind%,15,1<<21,1<<21) ELSE PROCsetstate(c_wind%,15,0,1<<21)
                  PROCcreate_setclock_wind(FNmsg_0("TitlA4"),FNmsg_0("IconA4"))
                  PROCfix_setbutton(c_wind%,0,FNmsg_0("IconA4"))
                  PROCfix_sethelp(c_wind%,0,FNmsg_0("ClockA2"))
                  PROCfix_sethelp(c_wind%,1,FNmsg_0("ClockIB"))
                  PROCopen_setclock_wind
                 ENDIF
          WHEN 4:PROCshutdown
         ENDCASE
 WHEN 1: REM browser menu
         CASE !menus% OF
          WHEN 0:PROCuser_set_an_alarm
          WHEN 1:CASE menus%!4 OF
                 WHEN 0: C%=alarm_head%
                         WHILE C%
                          REM IFFNcheck_pointer PROCcheck_pointer(C%,"PROCmenuselect(C%,0)")
                          IFC%?alarm_selected% THEN
                           C%?alarm_selected%=0
                           PROCredraw_alarm(C%)
                           PROCichang(C%)
                           C%=0
                          ELSE
                           C%=C%!alarm_next%
                          ENDIF
                         ENDWHILE
                 WHEN 1: IFalarm_confirm% THEN
                          IFFNalarm_selection_count=1 THEN
                           PROCset_string(deleting%,3,FNmsg_0("BrwsT3"))
                          ELSE
                           PROCset_string(deleting%,3,FNmsg_0("BrwsT4"))
                          ENDIF
                          doing_deleting%=TRUE
                          !Q%=deleting%:SYS"Wimp_GetWindowState",,Q%
                          C%=(scrx1%-(Q%!12-Q%!4)) DIV 2
                          D%=(scry1%-(Q%!8-Q%!16)) DIV 2
                          SYS"Wimp_CreateMenu",,deleting%,C%,D%
                          got_adjust%=FALSE
                         ELSE
                          PROCdelete_alarms
                         ENDIF
                 WHEN 2: REM copy alarms ...
                         SYS"Hourglass_On"
                         C%=alarm_head%
                         WHILE C%
                          REM IFFNcheck_pointer PROCcheck_pointer(C%,"PROCmenuselect(C%,2)")
                          IFC%?alarm_selected% THEN
                           C%?alarm_selected%=0
                           D%=FNheap_claim("ALRM",alarm_SIZE%)
                           IFD%=0 PROCout_of_memory
                           PROCcopyalarm(C%,D%)
                           PROCsave_alarm(D%)
                           C%=alarm_head%:REM start at the beginning again
                          ELSE
                           C%=C%!alarm_next%
                          ENDIF
                         ENDWHILE
                         alarm_warned%=FALSE
                         PROCunset_alarms_selection:REM neat way for forcing a redraw
                         SYS"Hourglass_Off"
                 ENDCASE
          WHEN 2:SYS"Hourglass_On":PROCselect_all_alarms:SYS"Hourglass_Off"
          WHEN 3:PROCunset_alarms_selection
          WHEN 5:REM since <Alarm$Dir>.Alarms is the default
                 REM we can safely save the alarms away
                 PROCsave_alarms_to_disc(ra$,FALSE,TRUE,TRUE)
                 PROCunset_alarms_selection
                 PROCopen_browser
         ENDCASE
 WHEN 2: REM alarm message menu
         CASE !menus% OF
          WHEN 0:PROCclosewindow(m_wind%)
          WHEN 1:REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCmenuselect(alarms%(1))")
                 alarm_repeating%?alarms%(1)=0:PROCclosewindow(m_wind%)
          WHEN 2:CASE menus%!4 OF
                 WHEN 0:PROCdefer(1)
                 WHEN 1:PROCdefer(2)
                 WHEN 2:PROCdefer(4)
                 WHEN 3:PROCdefer(8)
                 WHEN 4:PROCdefer(16)
                 WHEN 5:PROCdefer(32)
                 ENDCASE
         ENDCASE
 WHEN 3: REM alarm find menu
         C%=alarms%(0):REM pointer to current alarm
         CASE !menus% OF
          WHEN 0:PROCread_prev_alarm(C%)
                 PROCichang(C%)
          WHEN 1:PROCread_next_alarm(C%)
                 PROCichang(C%)
          WHEN 2:setclock_action%=finding%
                 PROCread_date_and_time(alarms%(2))
                 PROCsetstate(c_wind%,15,1<<23,1<<23):REM "delete" the icon
                 PROCcreate_setclock_wind(FNmsg_0("TitlA5"),FNmsg_0("IconA5"))
                 PROCfix_setbutton(c_wind%,0,FNmsg_0("IconA5"))
                 PROCfix_sethelp(c_wind%,0,FNmsg_0("FindA2"))
                 PROCfix_sethelp(c_wind%,1,FNmsg_0("FindIB"))
                 PROCopen_setclock_wind
         ENDCASE
 ENDCASE
 
 IF got_adjust% PROCdomenu(menuhand%,menux%,menuy%)
ENDPROC
:
DEFPROCreceive(A%)
 LOCAL task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%
 CASE Q%!16 OF
 WHEN 0     :PROCshutdown
 WHEN 2     :task_handle%=Q%!4
             my_ref%=Q%!8
             q20%=Q%!20
             q24%=Q%!24
             q28%=Q%!28
             q32%=Q%!32
             size%=Q%!36
             type%=Q%!40
             name$=FNrtoz(Q%+44)
             PROCsavefile((size%<>-1),name$,FALSE)
             PROCtransfer_reply(3,task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%)
 WHEN 3     :task_handle%=Q%!4
             my_ref%=Q%!8
             q20%=Q%!20
             q24%=Q%!24
             q28%=Q%!28
             q32%=Q%!32
             size%=Q%!36
             type%=Q%!40
             name$=FNrtoz(Q%+44)
             IF Q%!20=a_wind% THEN
              PROCset_task_alarm_string
              PROCtransfer_reply(4,task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%)
             ELSE
              IF (Q%!20=-2 OR Q%!20=browser%) AND type%=&AE9 THEN
               PROCload_alarms_into_memory(name$)
               PROCtransfer_reply(4,task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%)
              ENDIF
             ENDIF
 WHEN 5     :IF Q%!40=&AE9 THEN
              task_handle%=Q%!4
              my_ref%=Q%!8
              q20%=Q%!20
              q24%=Q%!24
              q28%=Q%!28
              q32%=Q%!32
              size%=Q%!36
              type%=Q%!40
              name$=FNrtoz(Q%+44)
              PROCtransfer_reply(4,task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%)
              PROCload_alarms_into_memory(name$)
             ENDIF
 WHEN 8     :IFmodified% THEN
              IF!Q%<>20 THEN
               IF(Q%!20 AND 1)=0 doing_shutdown%=2
              ELSE
               doing_shutdown%=2
              ENDIF
              Q%!12=Q%!8
              SYS"Wimp_SendMessage",19,Q%,Q%!4
              !Q%=warning%:SYS"Wimp_GetWindowState",,Q%
              C%=(scrx1%-(Q%!12-Q%!4)) DIV 2
              D%=(scry1%-(Q%!8-Q%!16)) DIV 2
              SYS"Wimp_CreateMenu",,warning%,C%,D%
              SYS"Wimp_SetCaretPosition",warning%,-1,,,1<<25
             ENDIF
 WHEN 10    :PROCsave_desktop_state
 WHEN &500  :PROCprocess_appl_alarm(A%)
 WHEN &501  :PROCprocess_bst_request
 WHEN &502  :PROCfix_help(Q%):PROCdetermine_help
 WHEN &400C0:CASE Q%!32 OF
              WHEN 1: CASE Q%!36 OF
                      WHEN 3: PROCsave_setup(&FFF,0,1,FNmsg_0("FN1"))
                      WHEN 4: PROCsave_setup(&AE9,0,2,FNmsg_0("FN1"))
                      ENDCASE
              WHEN 4: PROCsave_setup(&FFF,0,3,FNmsg_0("FN2"))
              WHEN 5: PROCsave_setup(&AE9,0,4,ra$)
             ENDCASE
             SYS"Wimp_CreateSubMenu",,Q%!20,Q%!24,Q%!28
 WHEN &400C1,&400CF :cur_format$ ="":PROCgettime
 WHEN &400C2:IFQ%!4<>taskid% AND FNrtoz(Q%+28)=task_id$ THEN
              Q%!12=0:Q%!16=0:!Q%=20
              SYS"Wimp_SendMessage",17,Q%,Q%!4
              PROCok(FNmsg_0("OkayB9"))
             ENDIF
 WHEN &400C9:IFQ%!20=deleting% THEN
              doing_deleting%=FALSE
             ENDIF
             IFFNalarm_selection_count=1 AND NOT(doing_deleting%) AND doing_shutdown%=0 THEN
              PROCunset_alarms_selection
             ENDIF
             IFQ%!20=save% doing_shutdown%=0
             IFQ%!20=warning% AND doing_shutdown%<>3 AND doing_shutdown%<>1 THEN
              REM 1 or 3 means that we have moved to the save dbox
              doing_shutdown%=0
             ENDIF
 ENDCASE
ENDPROC
:
DEFPROCacknowledge
 LOCAL error%
 IF Q%!16=&501 AND Q%!12=0 THEN
  REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCacknowledge(1)")
  PROCremove_alarm_from_list(alarms%(1),FALSE)
  PROCread_date_and_time(alarms%(1))
  PROCsave_repeating_alarm(alarms%(1),1,1,error%)
  IFerror% PROCok(FNmsg_0("OkayC5"))
  alarm_warned%=FALSE
  PROCreset_alarm_status
  PROCok(FNmsg_1("OkayA1",$(alarms%(1)+alarm_line1%)))
 ENDIF
ENDPROC

REM *************************************************************************
REM User message decoders
REM *************************************************************************

DEFPROCtransfer_reply(type%,handle%,ref%,size%,filetype%,name$,q20%,q24%,q28%,q32%)
 !Q%=(48+LENname$)ANDNOT3
 Q%!12=ref%
 Q%!16=type%
 Q%!20=q20%
 Q%!24=q24%
 Q%!28=q28%
 Q%!32=q32%
 Q%!36=size%
 Q%!40=filetype%
 $(Q%+44)=name$+CHR$0
 SYS"Wimp_SendMessage",17,Q%,handle%
ENDPROC
:
DEFPROCshutdown
 LOCAL C%,D%
 IFmodified% THEN
  !Q%=warning%:SYS"Wimp_GetWindowState",,Q%
  C%=(scrx1%-(Q%!12-Q%!4)) DIV 2
  D%=(scry1%-(Q%!8-Q%!16)) DIV 2
  SYS"Wimp_CreateMenu",,warning%,C%,D%
  SYS"Wimp_SetCaretPosition",warning%,-1,,,1<<25
  ENDPROC
 ENDIF
 PROCmsg_end
 REM Delete the code variable
 SYS"XOS_SetVarVal","Alarm$Free",,-1,0,16
 SYS"Wimp_CloseDown"
 END
ENDPROC
:
DEFPROCsave_desktop_state
 LOCAL I%,s$
 LOCAL ERROR
 ON ERROR LOCAL Q%!12=Q%!8:SYS"Wimp_SendMessage",19,Q%,Q%!4:ENDPROC
 I%=Q%!20
 BPUT#I%,FNbuild_alarm_options
 BPUT#I%,"Run "+FNread_system_string("Alarm$Dir","");
 IF ra$=def_fn$ BPUT#I%,10 ELSE BPUT#I%," "+ra$:REM Append alarms file location if non default
ENDPROC
:
DEFPROCdetermine_help
 LOCAL additional_help$,v%
 additional_help$=""
 IF Q%!36<-1 ENDPROC
 CASE Q%!32 OF
 WHEN -2: PROCh("AlarmH2")
 WHEN browser%,browse1%: PROCh("AlarmHA")
 WHEN  setup%:IF Q%!36=40 Q%!36=-1
              IF Q%!36=24 Q%!36=-1
              IF Q%!36=4  Q%!36=-1
              IF Q%!36=11 Q%!36=-1
              CASE Q%!36 OF
               WHEN-1: PROCh("AlarmHB")
               WHEN 0: IF FNicon_set(setup%,0)  PROCh("SHlp0B") ELSE PROCh("SHlp0A")
               WHEN18: PROCh("SHlpIA")
               WHEN 1: IF FNicon_set(setup%,1)  PROCh("SHlp1B") ELSE PROCh("SHlp1A")
               WHEN31,32,33,34,35,36,37:
                       IF FNicon_set(setup%,Q%!36) PROCh("SHlpHA") ELSE PROCh("SHlpHB")
               WHEN38: PROCh("SHlpGA")
               WHEN39: PROCh("SHlpGB")
               WHEN 2: PROCh("SHlpAA")
               WHEN19: IF FNicon_set(setup%,19) PROCh("SHlp2B") ELSE PROCh("SHlp2A")
               WHEN23: IF FNicon_set(setup%,23) PROCh("SHlp3B") ELSE PROCh("SHlp3A")
               WHEN25: PROCh("SHlp4A")
               WHEN27: PROCh("SHlp6A")
               WHEN26: PROCh("SHlp5A")
               WHEN28: PROCh("SHlp7A")
               WHEN29: PROCh("SHlp8A")
               WHEN30: additional_help$=FNconverttime(cur_clock%,FNread_string(setup%,30))
                       IFadditional_help$<>FNmsg_0("FrmtA4") THEN
                        additional_help$=FNmsg_0("SHlpBB")+"|M"+additional_help$
                       ENDIF
                       PROCh("SHlpBA")
               WHEN 3: IF FNicon_set(setup%,3)  PROCh("SHlp9B") ELSE PROCh("SHlp9A")
               WHEN20: PROCh("ClockA8")     :REM BST start time
               WHEN21: PROCh("ClockA7")
               WHEN22: PROCh("SHlpCA")
               WHEN41: PROCh("ClockB1")
               WHEN42: PROCh("ClockA9")
               WHEN 5: PROCh("ClockB2")     :REM BST start date
               WHEN 6: PROCh("SHlpDA")
               WHEN 7: PROCh("ClockB3")
               WHEN 8: PROCh("ClockB4")     :REM BST start month
               WHEN 9: PROCh("SHlpEA")
               WHEN10: PROCh("ClockB5")
               WHEN49: PROCh("ClockB6")     :REM BST start year
               WHEN48: PROCh("SHlpFA")
               WHEN50: PROCh("ClockB7")
               WHEN47: PROCh("ClockA8")     :REM BST end time
               WHEN46: PROCh("ClockA7")
               WHEN45: PROCh("SHlpCB")
               WHEN44: PROCh("ClockB1")
               WHEN43: PROCh("ClockA9")
               WHEN12: PROCh("ClockB2")     :REM BST end date
               WHEN13: PROCh("SHlpDB")
               WHEN14: PROCh("ClockB3")
               WHEN15: PROCh("ClockB4")     :REM BST end month
               WHEN16: PROCh("SHlpEB")
               WHEN17: PROCh("ClockB5")
               WHEN51: PROCh("ClockB6")     :REM BST end year
               WHEN52: PROCh("SHlpFB")
               WHEN53: PROCh("ClockB7")
              ENDCASE
 WHEN a_wind%:REM knock out the textual icons that we don't want to help on
              IF Q%!36=15 Q%!36=-1
              IF Q%!36=43 Q%!36=-1
              IF Q%!36=44 Q%!36=-1
              IFcurrent_action%<>setting% additional_help$=FNmsg_0("HelpE5")
              IF Q%!36=-1 THEN
               CASE current_action% OF
                WHEN setting%:PROCh("AlarmH3")
                WHEN changing%:PROCh("AlarmH5")
               ENDCASE
              ELSE
               CASE Q%!36 OF
                WHEN 0:PROCh("ClockA7")
                WHEN 1:PROCh("ClockA8")
  
                WHEN 2:PROCh("HelpB7")
  
                WHEN 3:PROCh("ClockA9")
                WHEN 4:PROCh("ClockB1")
                WHEN 5:IF FNicon_set(a_wind%,5) PROCh("HelpA7") ELSE PROCh("HelpA6")
                WHEN 6:PROCh("ClockB2")
                WHEN 7:PROCh("HelpA9")
                WHEN 8:PROCh("ClockB3")
                WHEN 9:PROCh("ClockB4")
                WHEN 10:PROCh("ClockB5")
  
                WHEN 11:PROCh("HelpA3")
  
                WHEN 12:PROCh("ClockB6")
                WHEN 13:PROCh("ClockB7")
  
                WHEN 14:PROCh("HelpA4")
  
                WHEN 16:PROCh("HelpB8")
                WHEN 17:PROCh("HelpB8")
                WHEN 18:PROCh("HelpB9")
                WHEN 19:IF FNicon_set(a_wind%,19) PROCh("HelpC2") ELSE PROCh("HelpC1")
                WHEN 20:PROCh("HelpC3")
                WHEN 21:PROCh("HelpC4")
                WHEN 22:PROCh("HelpC5")
                WHEN 23:PROCh("HelpC6")
                WHEN 24:PROCh("HelpC7")
                WHEN 25:PROCh("HelpC8")
                WHEN 26:PROCh("HelpC9")
                WHEN 27:PROCh("HelpD1")
                WHEN 28:PROCh("HelpD2")
                WHEN 29:IF FNicon_set(a_wind%,29) PROCh("HelpE2") ELSE PROCh("HelpE1")
                WHEN 30:IF FNicon_set(a_wind%,30) PROCh("HelpE4") ELSE PROCh("HelpE3")
                WHEN 31:CASE current_action% OF
                         WHEN setting%  :PROCh("HelpD3")
                         WHEN changing% :PROCh("HelpD7")
                        ENDCASE
                WHEN 32:PROCh("HelpF7")
                WHEN 33:PROCh("HelpE6")
                WHEN 34:PROCh("HelpF1")
                WHEN 35:PROCh("HelpF4")
                WHEN 36:PROCh("HelpF1")
                WHEN 37:PROCh("HelpF2")
                WHEN 38:PROCh("HelpF5")
                WHEN 39:PROCh("HelpF2")
                WHEN 40:PROCh("HelpF3")
                WHEN 41:PROCh("HelpF6")
                WHEN 42:PROCh("HelpF3")
  
                WHEN 46:PROCh("HelpB5")
                WHEN 47:PROCh("HelpB4")
                WHEN 48:PROCh("HelpA5")
  
                WHEN 49:PROCh("HelpG4")
                WHEN 50:PROCh("HelpG3")
                WHEN 51:PROCh("HelpG1")
                WHEN 52:PROCh("HelpG2")
               ENDCASE
              ENDIF
 WHEN c_wind%:CASE Q%!36 OF
               WHEN 0:PROCh("ClockA7")
               WHEN 1:PROCh("ClockA8")
               WHEN 3:PROCh("ClockA9")
               WHEN 4:PROCh("ClockB1")
               WHEN 6:PROCh("ClockB2")
               WHEN 8:PROCh("ClockB3")
               WHEN 9:PROCh("ClockB4")
               WHEN 10:PROCh("ClockB5")
               WHEN 12:PROCh("ClockB6")
               WHEN 13:PROCh("ClockB7")
               OTHERWISE :IF setclock_action%=clocking% THEN
                           CASE Q%!36 OF
                            WHEN -1:PROCh("AlarmH6")
                            WHEN 2:PROCh("ClockA5")
                            WHEN 5:PROCh("ClockA2")
                            WHEN 7:PROCh("ClockA3")
                            WHEN 11:PROCh("ClockQ3")
                            WHEN 14:PROCh("ClockQ4")
                            WHEN 15:IFFNicon_set(c_wind%,15) PROCh("ClockB9") ELSE PROCh("ClockB8")
                            WHEN 46 :PROCh("ClockQ5"):REM dow
                            WHEN 47 :PROCh("ClockA4"):REM month
                            WHEN 48 :PROCh("ClockQ6"):REM 12hr
                           ENDCASE
                          ELSE
                           CASE Q%!36 OF
                            WHEN -1:PROCh("AlarmH7")
                            WHEN 2:PROCh("FindA5")
   
                            WHEN 5:PROCh("FindA2")
                            WHEN 7:PROCh("FindA3")
                            WHEN 11:PROCh("FindQ3")
                            WHEN 14:PROCh("FindQ4")
                            WHEN 46 :PROCh("FindQ5"):REM dow
                            WHEN 47 :PROCh("FindA4"):REM month
                            WHEN 48 :PROCh("FindQ6"):REM 12hr
                           ENDCASE
                          ENDIF
              ENDCASE
 WHEN m_wind%:PROCh("AlarmH8")
 WHEN info%:PROCh("AlarmH9")
 WHEN save%:CASE Q%!36 OF
             WHEN 0:PROCh("Drg02")
             WHEN 2:PROCh("Drg03")
             WHEN 3:PROCh("Drg04")
             OTHERWISE:PROCh("Drg01")
            ENDCASE
 OTHERWISE
  IF Q%!36<>-1 THEN
   SYS"Wimp_GetMenuState",1,Q%+1024,Q%!32,Q%!36
   IF menuhand%=0 THEN
    CASE Q%!1024 OF
     WHEN 0:IF Q%!1028=-1 PROCh("MnuMM1")
     WHEN 1:PROCh("MnuMM3")
     WHEN 2:PROCh("MnuMM4")
     WHEN 3:IFsetclock_action%<>finding% PROCh("MnuMM5") ELSE PROCh("MnuMM7")
     WHEN 4:PROCh("MnuMM6")
    ENDCASE
   ENDIF
   IF menuhand%=3 THEN
    IFcurrent_action%=setting% THEN
     PROCh("MnuFI4")
    ELSE
     CASE Q%!1024 OF
      WHEN 0:PROCh("MnuFI1")
      WHEN 1:PROCh("MnuFI2")
      WHEN 2:IFsetclock_action%<>clocking% PROCh("MnuFI3") ELSE PROCh("MnuFI5")
     ENDCASE
    ENDIF
   ENDIF
   IF menuhand%=1 THEN
    v%=FNalarm_selection_count
    CASE Q%!1024 OF
    WHEN 0:IFcurrent_action%=-1 PROCh("BHlpA1") ELSE PROCgrey_help
    WHEN 1:IFcurrent_action%<>-1 OR v%=0 THEN
            PROCgrey_help
           ELSE
            CASE Q%!1028 OF
            WHEN 0: IFv%=1 THEN
                     PROCh("BHlpB1")
                    ELSE
                     PROCh("BHlpB2")
                    ENDIF
            WHEN 1: IFv%=1 THEN
                     PROCh("BHlpB3")
                    ELSE
                     PROCh("BHlpB4")
                    ENDIF
            WHEN 2: IFv%=1 THEN
                     PROCh("BHlpB9")
                    ELSE
                     PROCh("BHlpBA")
                    ENDIF
            WHEN 3: IFv%=1 THEN
                     PROCh("BHlpB5")
                    ELSE
                     PROCh("BHlpB6")
                    ENDIF
            WHEN 4: IFv%=1 THEN
                     PROCh("BHlpB7")
                    ELSE
                     PROCh("BHlpB8")
                    ENDIF
            OTHERWISE:IFv%=1 THEN
                       PROCh("BHlpA2")
                      ELSE
                       PROCh("BHlpA3")
                      ENDIF
            ENDCASE
           ENDIF
    WHEN 2:IFalarm_head%=0 PROCgrey_help ELSE PROCh("BHlpA4")
    WHEN 3:IFalarm_head%=0 THEN
            PROCh("MnuAM9")
           ELSE
            IFv%=0 THEN
             PROCh("MnuAMA")
            ELSE
             PROCh("BHlpA5")
            ENDIF
           ENDIF
    WHEN 4:IFalarm_head%=0 OR current_action%<>-1 PROCgrey_help ELSE PROCh("BHlpA6")
    WHEN 5:IFcurrent_action%<>-1 PROCgrey_help ELSE PROCh("BHlpA7")
    ENDCASE
   ENDIF
   IF menuhand%=2 THEN
    CASE Q%!1024 OF
     WHEN 0:PROCh("MnuAL1")
     WHEN 1:PROCh("MnuAL2")
     WHEN 2:CASE Q%!1028 OF
             WHEN 0:IF Q%!1032=-1 PROCh("MnuD21") ELSE PROCh("MnuD11")
             WHEN 1:IF Q%!1032=-1 PROCh("MnuD22") ELSE PROCh("MnuD11")
             WHEN 2:IF Q%!1032=-1 PROCh("MnuD23") ELSE PROCh("MnuD11")
             WHEN 3:IF Q%!1032=-1 PROCh("MnuD24") ELSE PROCh("MnuD11")
             WHEN 4:IF Q%!1032=-1 PROCh("MnuD25") ELSE PROCh("MnuD11")
             WHEN 5:IF Q%!1032=-1 PROCh("MnuD26") ELSE PROCh("MnuD11")
             OTHERWISE :PROCh("MnuAL3")
            ENDCASE
    ENDCASE
   ENDIF
  ENDIF
 ENDCASE
ENDPROC
:
DEFFNkey(H%,I%,C%)
 LOCAL num_icons%,copy_icons%,midx%,midy%

 IF H% =a_wind% OR H% =c_wind% THEN
  IF H% =a_wind% THEN alarm% =alarms%(0) ELSE alarm% =alarms%(2)
  CASE C% OF
  WHEN &0D,&18A,&19A,&18E,&18F:
   PROCrec_fromwin(alarm%,H%)
   PROCrefresh_window(H%,alarm%)
  ENDCASE
 ENDIF
 
 IFC%=13 THEN
  CASE H% OF
  WHEN a_wind%,c_wind%,save%,setup%,warning%:
   Q%!28 =H% OR 1
   SYS"Wimp_GetWindowInfo",,Q% +28
   num_icons% =Q%!(28 +4 +84)
   midx%=(Q%!(28 +4 +0) + Q%!(28 +4 +8)) / 2
   midy%=(Q%!(28 +4 +4) + Q%!(28 +4+12)) / 2

   REM look for default button first
   copy_icons% =0
   WHILE copy_icons% <num_icons%
    Q%!(28 +4) =copy_icons%
    SYS"Wimp_GetIconState",,Q% +28
    IF INSTR(FNvalid(Q%+28 +8),"R6,3") THEN
     REM Land the mouse somewhere in the visible area
     Q%!(28 +0) =midx%
     Q%!(28 +4) =midy%
     Q%!(28 +8) =%100 :REM select
     Q%!(28 +12) =H%
     Q%!(28 +16) =copy_icons%
     SYS"Wimp_SendMessage",6,Q%+28,H%
     =TRUE
    ENDIF
    copy_icons% +=1
   ENDWHILE
 
   REM then look for non-default button
   copy_icons% =0
   WHILE copy_icons% <num_icons%
    Q%!(28 +4) =copy_icons%
    SYS"Wimp_GetIconState",,Q% +28
    IF INSTR(FNvalid(Q%+28 +8),"R5,3") THEN
     REM Land the mouse somewhere in the visible area
     Q%!(28 +0) =midx%
     Q%!(28 +4) =midy%
     Q%!(28 +8) =%100 :REM select
     Q%!(28 +12) =H%
     Q%!(28 +16) =copy_icons%
     SYS"Wimp_SendMessage",6,Q%+28,H%
     =TRUE
    ENDIF
    copy_icons% +=1
   ENDWHILE
  ENDCASE
 ENDIF
=FALSE
