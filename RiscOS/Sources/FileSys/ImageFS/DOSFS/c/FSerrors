/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*> c.FSerrors <*/
/*---------------------------------------------------------------------------*/
/* Error strings and handler functions            Copyright (c) 1989 JGSmith */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "ASCII.h"
#include "DOSFSctl.h"
#include "debug.h"
#include "FSerrors.h"
#include "MsgTrans.h"

/*-------------------------------------------------------------------------*/

_kernel_oserror *_syserr ;      /* global error pointer */

/*---------------------------------------------------------------------------*/

/* The following is used to construct MessageTrans tokens for errors. */
#define ERROR_FMT "ERR%2.2X"

_kernel_oserror  _gerror = {0} ; /* static error structure */
_kernel_oserror *_syserr ;       /* static pointer to the error structure */

/*---------------------------------------------------------------------------*/
/* global_error:
 * Return a RISC OS error block pointer for the given error number.
 */
_kernel_oserror *global_error(int number)
{
 /* return a pointer to the "_kernel_oserror" block for error "number" */
 char token[8];
 _kernel_oserror *err;
 char *buf = _gerror.errmess;
 int bufsz = 252;
 _gerror.errnum = ext_err(number) ;
 /* lookup Messages file for error text */
 sprintf(token, ERROR_FMT, number);
 if ((err = msgtrans_lookup(token, &buf, &bufsz, 0, 0, 0, 0)) != NULL)
  return err;
 tracef2("DOSFS: global_error: &%08X \"%s\"\n",_gerror.errnum,_gerror.errmess);
 return(_syserr) ;
}

/*---------------------------------------------------------------------------*/
/* global_errorP:
 * Return a RISC OS error block pointer for the given error number. The
 * passed parameter is placed into the error message.
 */

_kernel_oserror *global_errorP(int number,char *par1)
{
 /* return a pointer to the "_kernel_oserror" block for error "number" */
 char token[8];
 _kernel_oserror *err;
 char *buf = _gerror.errmess;
 int bufsz = 252;
 _gerror.errnum = ext_err(number) ;
 /* lookup Messages file for error text */
 sprintf(token, ERROR_FMT, number);
 if ((err = msgtrans_lookup(token, &buf, &bufsz, par1, 0, 0, 0)) != NULL)
  return err;
 tracef2("DOSFS: global_errorP: &%08X \"%s\"\n",_syserr->errnum,_syserr->errmess) ;
 return(_syserr) ;
}

/*---------------------------------------------------------------------------*/

void global_error0(int number)
{
 /* place error number and message into "_syserr" */
 global_error(number) ;
 return ;
}

/*---------------------------------------------------------------------------*/
#if 0 /* not used at the moment */
int exported_error_number(int number)
{
 return(ext_err(errlist[number].errnum)) ;
}
#endif
/*---------------------------------------------------------------------------*/

void global_error1(int number,char *par1)
{
 /* place error number and message into "_syserr" */
 global_errorP(number, par1);
 return ;
}

/*---------------------------------------------------------------------------*/

void global_errorX(_kernel_oserror *errptr)
{
 _gerror.errnum = errptr->errnum ;
 sprintf(&(_gerror.errmess[0]),errptr->errmess) ;
 return ;
}

/*---------------------------------------------------------------------------*/

_kernel_oserror *global_errorT(int number,char *token,char *par1,char *par2)
{
 _kernel_oserror *err;
 char *buf = _gerror.errmess;
 int bufsz = 252;
 _gerror.errnum = ext_err(number) ;
 /* lookup Messages file for error text */
 if ((err = msgtrans_lookup(token, &buf, &bufsz, par1, par2, 0, 0)) != NULL)
  return err;
 tracef2("DOSFS: global_errorT: &%08X \"%s\"\n",_syserr->errnum,_syserr->errmess) ;
 return(_syserr) ;
}
/*> EOF c.FSerrors <*/
