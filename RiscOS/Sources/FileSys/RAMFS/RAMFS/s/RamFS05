; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >RamFS05

        TTL     "Optimised block move"

; BlockMove
; ---------
; Can't cope with overlapping source and dest
; Entry: R0 = Source start
;        R1 = Dest start
;        R2 = Byte length
BlockMove ROUT
      [ Debug9
        DLINE   "source  |dest    |length  - enter BlockMove"
        DREG    R0, " ",cc
        DREG    R1, " ",cc
        DREG    R2, " "
      ]
        MOVS    R2, R2
        MOVEQ   PC, LR
        Push    "R0-R12, LR"

        ; bytes at a time until source aligned
05
        TSTNE   R0, #2_11
        LDRNEB  LR, [R0], #1
        STRNEB  LR, [R1], #1
        SUBNES  R2, R2, #1
        BNE     %BT05

        ANDS    LR, R1, #2_11                   ; dest mis-alignment
        BEQ     %FT30                           ; same alignment

        ; mis-aligned move
        CMP     R2, #10*4                       ; enough left to worth being clever ?
        BLO     %FT40                           ; if not
        SUB     R2, R2, #10*4

        LDR     R3, [R0], #4                    ; get a word from source
10
        STRB    R3, [R1], #1                    ; put bytes to dest until aligned
        MOV     R3, R3, LSR #8
        TSTS    R1, #2_11
        BNE     %BT10
        MOV     LR, LR, LSL #3                  ; # bits left in R3
        RSB     R12, LR, #32                    ; # bits free in R3
15
        LDMIA   R0!,{R4-R11}                    ; load 8 words
                                                ; do 8 word shift, spare bits in R3
        ORR     R3, R3, R4, LSL LR
        MOV     R4, R4, LSR R12

        ORR     R4, R4, R5, LSL LR
        MOV     R5, R5, LSR R12

        ORR     R5, R5, R6, LSL LR
        MOV     R6, R6, LSR R12

        ORR     R6, R6, R7, LSL LR
        MOV     R7, R7, LSR R12

        ORR     R7, R7, R8, LSL LR
        MOV     R8, R8, LSR R12

        ORR     R8, R8, R9, LSL LR
        MOV     R9, R9, LSR R12

        ORR     R9, R9, R10,LSL LR
        MOV     R10,R10,LSR R12

        ORR     R10,R10,R11,LSL LR
        STMIA   R1!, {R3-R10}
        MOV     R3, R11, LSR R12

        SUBS    R2, R2, #8*4
        BPL     %BT15
        ADD     R2, R2, #9*4
20
        ; write out spare bytes from shift
        STRB    R3, [R1], #1
        MOV     R3, R3, LSR #8
        SUBS    LR, LR, #8
        BNE     %BT20
        B       %FT40                           ; do any bytes left

        ; aligned move
25
        LDMIA   R0!, {R3-R12, LR}               ; move 11 aligned words at a time
        STMIA   R1!, {R3-R12, LR}
        LDMIA   R0!, {R3-R12, LR}               ; move 11 aligned words at a time
        STMIA   R1!, {R3-R12, LR}
30
        SUBS    R2, R2, #22*4
        BPL     %BT25
        ADDS    R2, R2, #(22*4)-(3*4)
35
        LDMCSIA R0!, {R3-R5}
        STMCSIA R1!, {R3-R5}
        SUBCSS  R2, R2, #3*4
        BCS     %BT35
        ADD     R2, R2, #3*4
40
        ; move any odd bytes left
        SUBS    R2, R2, #1
        LDRPLB  LR, [R0],#1
        STRPLB  LR, [R1],#1
        BPL     %BT40
        Pull    "R0-R12, PC"

        END
