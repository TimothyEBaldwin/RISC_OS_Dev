/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   getstate.c
 * Purpose: return state for a Scale Object
 * Author:  TGR
 * History: 27-Apr-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/scale.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "getstate.h"

extern _kernel_oserror *getstate_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request for info about an object
     * R0 = 5
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     */

    /*
     * return state in R0
     *
     */


   _kernel_oserror     *e;
   _kernel_swi_regs     regs;
   wimp_GetWindowState  state;
   ScaleInternal       *internal = (ScaleInternal *) r->r[2];

   if (internal->wimp_handle) {
      state.open.window_handle = internal->wimp_handle;
      regs.r[1] = (int) &state;
      if ((e = _kernel_swi (Wimp_GetWindowState, &regs, &regs)) != NULL)
         return e;

      r->r[0] = (state.flags & wimp_WINDOWFLAGS_OPEN) ? Toolbox_GetObjectState_Showing : 0;
   } else {
      r->r[0] = (internal->flags & ScaleInternal_IsShowing) ? Toolbox_GetObjectState_Showing : 0;
   }

   IGNORE(t);

   return NULL;
}

