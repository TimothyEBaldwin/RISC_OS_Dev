; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        GET     Hdr:HALSize.<HALSize>
        $GetCPU
        $GetIO
        $GetMEMC
        $GetMEMM
        $GetVIDC

        GET     Hdr:Proc
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS
        GET     hdr.IOMD
        GET     hdr.Copro15ops

        EXPORT  HALdescriptor
        IMPORT  HAL_Base
        IMPORT  start

        AREA    |Asm$$Code|, CODE, READONLY, PIC


HALdescriptor   DATA
        DCD     0
        DCD     HAL_Base - HALdescriptor
        DCD     OSROM_HALSize
        DCD     HAL_EntryTable - HALdescriptor
        DCD     HAL_Entries
        DCD     HAL_WsSize

        MACRO
        HALEntry $name
        ASSERT  (. - HAL_EntryTable) / 4 = EntryNo_$name
        DCD     $name - HAL_EntryTable
        MEND

        MACRO
        NullEntry
        DCD     HAL_Null - HAL_EntryTable
        MEND

        IMPORT   Video_init

        IMPORT   HAL_IRQEnable
        IMPORT   HAL_IRQDisable
        IMPORT   HAL_IRQClear
        IMPORT   HAL_IRQSource
        IMPORT   HAL_IRQStatus
        IMPORT   HAL_FIQEnable
        IMPORT   HAL_FIQDisable
        IMPORT   HAL_FIQDisableAll
        IMPORT   HAL_FIQClear
        IMPORT   HAL_FIQSource
        IMPORT   HAL_FIQStatus

        IMPORT   HAL_Timers
        IMPORT   HAL_TimerDevice
        IMPORT   HAL_TimerGranularity
        IMPORT   HAL_TimerMaxPeriod
        IMPORT   HAL_TimerSetPeriod
        IMPORT   HAL_TimerPeriod
        IMPORT   HAL_TimerReadCountdown

        IMPORT   HAL_CounterRate
        IMPORT   HAL_CounterPeriod
        IMPORT   HAL_CounterRead
        IMPORT   HAL_CounterDelay

        IMPORT   HAL_IICBuses
        IMPORT   HAL_IICType
        IMPORT   HAL_IICSetLines
        IMPORT   HAL_IICReadLines

        IMPORT   HAL_NVMemoryType
        IMPORT   HAL_NVMemorySize
        IMPORT   HAL_NVMemoryPageSize
        IMPORT   HAL_NVMemoryProtectedSize
        IMPORT   HAL_NVMemoryProtection
        IMPORT   HAL_NVMemoryIICAddress
        IMPORT   HAL_NVMemoryRead
        IMPORT   HAL_NVMemoryWrite

        IMPORT   HAL_VideoFlybackDevice
        IMPORT   HAL_Video_SetMode
        IMPORT   HAL_Video_WritePaletteEntry
        IMPORT   HAL_Video_WritePaletteEntries
        IMPORT   HAL_Video_ReadPaletteEntry
        IMPORT   HAL_Video_SetInterlace
        IMPORT   HAL_Video_SetBlank
        IMPORT   HAL_Video_SetPowerSave
        IMPORT   HAL_Video_UpdatePointer
        IMPORT   HAL_Video_SetDAG
        IMPORT   HAL_Video_VetMode
        IMPORT   HAL_Video_PixelFormats
        IMPORT   HAL_Video_Features
        IMPORT   HAL_Video_BufferAlignment
        IMPORT   HAL_Video_OutputFormat
        IMPORT   HAL_MonitorLeadID

        IMPORT   HAL_ATAControllerInfo
        IMPORT   HAL_ATASetModes
        IMPORT   HAL_ATACableID
        ;IMPORT   HAL_MatrixColumns
        ;IMPORT   HAL_MatrixScan

        IMPORT   HAL_MachineID

        IMPORT   HAL_KbdScanSetup
        IMPORT   HAL_KbdScanFinish
        IMPORT   HAL_KbdScan
        IMPORT   HAL_KbdScanInterrupt

HAL_EntryTable  DATA
        HALEntry HAL_Init

        HALEntry HAL_IRQEnable
        HALEntry HAL_IRQDisable
        HALEntry HAL_IRQClear
        HALEntry HAL_IRQSource
        HALEntry HAL_IRQStatus
        HALEntry HAL_FIQEnable
        HALEntry HAL_FIQDisable
        HALEntry HAL_FIQDisableAll
        HALEntry HAL_FIQClear
        HALEntry HAL_FIQSource
        HALEntry HAL_FIQStatus

        HALEntry HAL_Timers
        HALEntry HAL_TimerDevice
        HALEntry HAL_TimerGranularity
        HALEntry HAL_TimerMaxPeriod
        HALEntry HAL_TimerSetPeriod
        HALEntry HAL_TimerPeriod
        HALEntry HAL_TimerReadCountdown

        HALEntry HAL_CounterRate
        HALEntry HAL_CounterPeriod
        HALEntry HAL_CounterRead
        HALEntry HAL_CounterDelay

        HALEntry HAL_NVMemoryType
        HALEntry HAL_NVMemorySize
        HALEntry HAL_NVMemoryPageSize
        HALEntry HAL_NVMemoryProtectedSize
        HALEntry HAL_NVMemoryProtection
        HALEntry HAL_NVMemoryIICAddress
        HALEntry HAL_NVMemoryRead
        HALEntry HAL_NVMemoryWrite

        HALEntry HAL_IICBuses
        HALEntry HAL_IICType
        HALEntry HAL_IICSetLines
        HALEntry HAL_IICReadLines
        NullEntry ;HAL_IICDevice
        NullEntry ;HAL_IICTransfer
        NullEntry ;HAL_IICMonitorTransfer

        HALEntry HAL_VideoFlybackDevice
        HALEntry HAL_Video_SetMode
        HALEntry HAL_Video_WritePaletteEntry
        HALEntry HAL_Video_WritePaletteEntries
        HALEntry HAL_Video_ReadPaletteEntry
        HALEntry HAL_Video_SetInterlace
        HALEntry HAL_Video_SetBlank
        HALEntry HAL_Video_SetPowerSave
        HALEntry HAL_Video_UpdatePointer
        HALEntry HAL_Video_SetDAG
        HALEntry HAL_Video_VetMode
        HALEntry HAL_Video_PixelFormats
        HALEntry HAL_Video_Features
        HALEntry HAL_Video_BufferAlignment
        HALEntry HAL_Video_OutputFormat

        NullEntry ;HAL_MatrixColumns
        NullEntry ;HAL_MatrixScan

        NullEntry ;HAL_TouchscreenType
        NullEntry ;HAL_Touchscreenread
        NullEntry ;HAL_Touchscreenread
        NullEntry ;HAL_Touchscreenread

        HALEntry HAL_MachineID

        HALEntry HAL_ControllerAddress
        HALEntry HAL_HardwareInfo
        HALEntry HAL_SuperIOInfo
        HALEntry HAL_PlatformInfo
        HALEntry HAL_CleanerSpace

        NullEntry ;HAL_UARTPorts
        NullEntry ;HAL_UARTStartUp
        NullEntry ;HAL_UARTShutdown
        NullEntry ;HAL_UARTFeatures
        NullEntry ;HAL_UARTReceiveByte
        NullEntry ;HAL_UARTTransmitByte
        NullEntry ;HAL_UARTLineStatus
        NullEntry ;HAL_UARTInterruptEnable
        NullEntry ;HAL_UARTRate
        NullEntry ;HAL_UARTFormat
        NullEntry ;HAL_UARTFIFOSize
        NullEntry ;HAL_UARTFIFOClear
        NullEntry ;HAL_UARTFIFOEnable
        NullEntry ;HAL_UARTFIFOThreshold
        NullEntry ;HAL_UARTInterruptID
        NullEntry ;HAL_UARTBreak
        NullEntry ;HAL_UARTModemControl
        NullEntry ;HAL_UARTModemStatus
        NullEntry ;HAL_UARTDevice

        HALEntry HAL_Reset
        NullEntry ;HAL_DebugRX
        NullEntry ;HAL_DebugTX

        NullEntry ;HAL_PCIFeatures
        NullEntry ;HAL_PCIReadConfigByte
        NullEntry ;HAL_PCIReadConfigHalfword
        NullEntry ;HAL_PCIReadConfigWord
        NullEntry ;HAL_PCIWriteConfigByte
        NullEntry ;HAL_PCIWriteConfigHalfword
        NullEntry ;HAL_PCIWriteConfigWord
        NullEntry ;HAL_PCISpecialCycle
        NullEntry ;HAL_PCISlotTable
        NullEntry ;HAL_PCIAddresses

        HALEntry HAL_ATAControllerInfo
        HALEntry HAL_ATASetModes
        HALEntry HAL_ATACableID

        NullEntry ;HAL_InitDevices

        HALEntry HAL_KbdScanSetup
        HALEntry HAL_KbdScan
        HALEntry HAL_KbdScanFinish
        HALEntry HAL_KbdScanInterrupt

        HALEntry HAL_PhysInfo

        NullEntry ;HALEntry HAL_USBControllerInfo

        HALEntry HAL_MonitorLeadID

HAL_Entries     * (.-HAL_EntryTable)/4

        MACRO
        CallOS  $entry
        ASSERT  $entry <= HighestOSEntry
        MOV     lr, pc
        LDR     pc, OSentries + 4*$entry
        MEND

;--------------------------------------------------------------------------------------


HAL_Init
        Entry

        BL      SetUpOSEntries
        MOV     a1, #0
        MOV     a2, #IOPhys
        MOV     a3, #IOSize
        CallOS  OS_MapInIO
        STR     a1, IO_Address
        ADD     a2, a1, #IOMDPhys - IOPhys
        STR     a2, IOMD_Address
        ADD     a3, a1, #VIDCPhys - IOPhys
        STR     a3, VIDC_Address
        ADD     a3, a1, #C710Phys - IOPhys
        STR     a3, C710_Address

        LDRB    a1, [a2, #IOMD_ID0]
        LDRB    a4, [a2, #IOMD_ID1]
        ORR     a1, a1, a4, LSL #8
        LDR     a4, =IOMD_Original
        TEQ     a1, a4
        MOVEQ   ip, #0                    ; assume Medusa
        MOVNE   ip, #IOST_7500            ; else assume Morris
        STRB    ip, IOSystemType

        MOV     a1, #0
        MOV     a2, #EASIPhys
        MOV     a3, #EASISize
        CallOS  OS_MapInIO
        STR     a1, EASI_Address

        BL      Video_init

        LDR     a1, C710_Address        ; Get C710/SuperIO

        MOV     a2, #0x55               ; Enter config mode
        STRB    a2, [a1, #0xfc0]
        STRB    a2, [a1, #0xfc0]
        MOV     a2, #0x0d
        STRB    a2, [a1, #0xfc0]

        ADR     a2, SuperIOTab
SPL     LDRB    a3, [a2], #1
        CMP     a3, #0xff
        LDRNEB  a4, [a2], #1
        STRNEB  a3, [a1, #0xfc0]
        STRNEB  a4, [a1, #0xfc4]
        BNE     SPL

        MOV     a2, #0xaa               ; Leave config mode
        STRB    a2, [a1, #0xfc0]

        EXIT

; Initialise and relocate the entry table.
SetUpOSEntries  ROUT
        STR     a1, OSheader
        LDR     a2, [a1, #OSHdr_NumEntries]
        CMP     a2, #HighestOSEntry+1
        MOVHI   a2, #HighestOSEntry+1

        ADR     a3, OSentries
        LDR     a4, [a1, #OSHdr_Entries]
        ADD     a4, a4, a1

05      SUBS    a2, a2, #1
        LDR     ip, [a4, a2, LSL #2]
        ADD     ip, ip, a4
        STR     ip, [a3, a2, LSL #2]
        BNE     %BT05

        MOV     pc, lr


HAL_Null
        MOV     pc, lr

HAL_ControllerAddress
        MOV     a1, #0                  ; Default to "not fitted"
        AND     a3, a2, #&FF            ; Get sequence number.
        MOV     a2, a2, LSR #8          ; Get controller type.
        CMP     a2, #34
        BEQ     ca_82C710
        CMP     a2, #4
        ADDLS   pc, pc, a2, LSL #2
        MOV     pc, lr
        B       ca_EASIspeed
        B       ca_EASIspace
        MOV     pc, lr
        B       ca_VIDC20
        B       ca_IOMD

ca_EASIspeed
        LDR     ip, IOMD_Address
        CMP     a3, #EASISlots
        ADDLO   a1, ip, #IOMD_ECTCR
        MOV     pc, lr

ca_EASIspace
        LDR     ip, EASI_Address
        CMP     a3, #EASISlots
        ADDLO   a1, ip, a3, LSL #EASISlotSizeShift
        MOV     pc, lr

ca_VIDC20
        TEQ     a3, #0
        LDREQ   a1, VIDC_Address
        MOV     pc, lr

ca_IOMD
        TEQ     a3, #0
        LDREQ   a1, IOMD_Address
        MOV     pc, lr

ca_82C710
        TEQ     a3, #0
        LDREQ   a1, C710_Address
        MOV     pc, lr

HAL_HardwareInfo
        LDR     ip, =&01010100
        STR     ip, [a1]
        MOV     ip, #1
        STR     ip, [a2]
        MOV     ip, #0
        STR     ip, [a3]
        MOV     pc, lr

HAL_SuperIOInfo
        LDR     ip, =&00311111
        STR     ip, [a1]
        LDR     ip, =&00011100
        STR     ip, [a2]
        MOV     pc, lr

HAL_PlatformInfo
        ADR     a4, %86
        LDR     ip, IOMD_Address
        LDRB    ip, [ip, #IOMD_ID0]
82
        LDR     a1, [a4], #4
        TEQ     a1, #&80000000     ;terminator
        TEQNE   a1, ip
        ADDNE   a4, a4, #2*4
        BNE     %BT82
        ; Assuming no ROM patches are in use, a log->phys conversion on the ROM
        ; base should reveal whether we're running from RAM or not
        Push    "a2-a4,lr"
        LDR     a1, =HAL_Base
        CallOS  OS_LogToPhys
        CMP     a1, #ROMBank0Phys
        Pull    "a2-a4,lr"
        LDMIA   a4, {a4,ip}
        ORRNE   a4, a4, #16 ; Soft ROM
        STR     a4, [a2]
        STR     ip, [a3]
        MOV     pc, lr
86
        DCD     IOMD_Original :AND: &FF, &00000005, &0000001F
        DCD     IOMD_7500     :AND: &FF, &00000001, &0000001F
        DCD     IOMD_7500FE   :AND: &FF, &00000001, &0000001F
        DCD     IOMD_IOMD2    :AND: &FF, &0000000F, &0000001F
        DCD     &80000000,                       0,         0  ;terminator

;must return address of at least 64k of physical space suitable for
;cache cleaning (at least 4k aligned, preferably 64k aligned)
;or, return -1 if HAL knows not needed (eg. knows core in system)
;
HAL_CleanerSpace
        MOV     a1, #ROMBank1Phys
        MOV     pc, lr

HAL_Reset
        ; a1 = reset/power off flag
        ; a2 = L1PT
        ; Follow the same basic procedure as the softload tool; set up a
        ; mapping in L1PT for the first MB of the ROM, and then disable the
        ; MMU and jump to it
        MOV     v1, a2
        ADRL    a1, start
        CallOS  OS_LogToPhys ; Find ourselves
        MSR     CPSR_c, #SVC32_mode+I32_bit+F32_bit
        MOV     a2, a1, LSR #20
        MOV     a3, a2, LSL #20
        ORR     a3, a3, #(1:SHL:10)     ; svc-only access
        ORR     a3, a3, #(1:SHL:4):OR:2 ; U~C~B, section mapped
        STR     a3, [v1, a2, LSL #2]
        ARM_read_ID a2
        AND     a2,a2,#&F000
;flush cache
        CMP     a2,#&A000
        ARM67_flush_cache NE       ;if not StrongARM, assume 6,7
        ARM67_flush_TLB NE
        BNE     %FT10
;StrongARM then
        ; We don't know where the cleaner space is.
        ; Just use a 32K block from the start of the OS image.
        LDR     a2, =HAL_Base+OSROM_HALSize
        ARMA_clean_DC a2,a3,a4
        ADD     a2, a2, #16*1024
        ARMA_clean_DC a2,a3,a4
        ARMA_drain_WB
        ARMA_flush_DC
        ARMA_flush_IC
        ARMA_flush_TLBs
10
        ; Now we're ready to go
        MOV     a2, #&30
        ARM_write_control a2
        MOV     pc, a1

; Shifts to determine number of bytes/words to allocate in table.
NibbleShift     *       12
ByteShift       *       NibbleShift + 1
WordShift       *       ByteShift + 2

; Bit patterns for different types of memory.
NotPresent      *       &00000000
DRAM_Pattern    *       &11111111
VRAM_Pattern    *       &22222222
ROM_Pattern     *       &33333333
IO_Pattern      *       &44444444
NotAvailable    *       &88888888

PhysSpaceSize * &20000000 ; IOMD physical map is 512M big. Will be wrong for Kinetic!

HAL_PhysInfo ROUT
        TEQ     a1, #0
        MOVEQ   a1, #PhysSpaceSize :SHR: ByteShift
        MOVEQ   pc, lr

        MOV     ip, lr
        MOV     a3, #PhysSpaceSize ; End of DRAM area for kernel to fill in
        STR     a3, [a2]

        ; &00000000 to OSROM_ImageSize*1024 is ROM.
        ; This will obviously be wrong for compressed images, but at the moment
        ; we don't have any way of knowing what size the compressed image was.
        ; And it could still end up being wrong for any softload. Oh well.
        ASSERT  ((OSROM_ImageSize*1024) :AND: ((1<<WordShift)-1))=0
        ASSERT  OSROM_ImageSize*1024 <= &02000000
        MOV     a2, #(OSROM_ImageSize*1024-&00000000) :SHR: WordShift
        LDR     a3, =ROM_Pattern :OR: NotAvailable
        BL      fill_words

        ; OSROM_ImageSize*1024 to &02000000 is allocated to ROM but is not present.
        MOV     a2, #(&02000000-OSROM_ImageSize*1024) :SHR: WordShift
        LDR     a3, =NotPresent :OR: NotAvailable
        BL      fill_words

        ; &02000000 to &02800000 is VRAM or not present.
        LDRB    a4, VRAMWidth           ; Get amount of VRAM (in megabytes).
        MOVS    a4, a4, LSL #20
        MOVNE   a2, a4, LSR #WordShift  ; If there is some then fill part of table.
        LDRNE   a3, =VRAM_Pattern :OR: NotAvailable
        BLNE    fill_words

        ; End of VRAM to &03000000 is not present.
        RSB     a4, a4, #&03000000-&02000000
        MOV     a2, a4, LSR #WordShift
        LDR     a3, =NotPresent :OR: NotAvailable
        BL      fill_words

        ; &03000000 to &03800000 is I/O.
        MOV     a2, #(&03800000-&03000000) :SHR: WordShift
        LDR     a3, =IO_Pattern :OR: NotAvailable
        BL      fill_words

        ; &03800000 to &08000000 is not present.
        MOV     a2, #(&08000000-&03800000) :SHR: WordShift
        LDR     a3, =NotPresent :OR: NotAvailable
        BL      fill_words

        ; &08000000 to &10000000 is I/O (EASI space).
        MOV     a2, #(&10000000-&08000000) :SHR: WordShift
        LDR     a3, =IO_Pattern :OR: NotAvailable
        BL      fill_words

        ; &10000000 to &20000000 is DRAM (filled in by kernel) or not present
        MOV     a2, #(&20000000-&10000000) :SHR: WordShift
        LDR     a3, =NotPresent :OR: NotAvailable
        BL      fill_words

        MOV     a1, #DRAM0PhysRam ; Start of DRAM area for kernel to fill in
        MOV     pc, ip

fill_words
        STR     a3, [a1], #4
        SUBS    a2, a2, #1
        BNE     fill_words
        MOV     pc, lr

        LTORG

SuperIOTab
        = 0x01,0x87,0x02,0x1c,0x03,0x78,0x04,0x03,0x05,0x00,0x06,0xff
        = 0x07,0x00,0x08,0x00,0x09,0x00,0x0a,0x00,0x00,0xbb,0xff

        END
