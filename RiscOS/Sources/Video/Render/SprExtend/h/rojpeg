/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* h.rojpeg
   Interface between core code and SpriteExtend innards.
   started: 12 Sep 93 WRS
*/

#ifndef rojpeg_h_
#define rojpeg_h_

#include "jinclude.h"

#define UNUSED(k) (k)=(k)
/* When compiler warnings get in the way of quality */

void assembler_panic(decompress_info_ptr cinfo, int *regblock, int code);
/* Called from the assembler code if something terrible went wrong */

extern int create_dynamic_area(int size);
/* Creates a dynamic area (done in assembler since the C code has no visibility of the message file) */

int do_jpeg_scan_file(char *space, int space_size, char *file_image, int image_length);
int do_jpeg_scan_file_16(char *space, int space_size, char *file_image, int image_length);
/* Used by CFSI assembler code */

void mono_convert_block(JBLOCK jblock, int *outptr, int outoffset);
void colour_convert_block(JCOEF *yuv, int *outptr, int outoffset);
/* Used by SpriteExtend assembler code */

int find_image_dims(char *jdata, int *image_width, int *image_height,
                           int *image_type,
#ifndef CFSI
                           int *image_density,
#endif
                           int *ws_size, int *err);
/* Used by both CFSI and SpriteExtend assembler code */                           

int jpeg_scan_file(decompress_info_ptr cinfo, char *file_image, int image_length,
                          int xmin, int xmax, int width, int height, int options);
/* Given a file image and all necessary workspace, scan the file image,
build an array of band pointers into it. file_image points to image_length
bytes, which should be a JFIF file. Only two forms of file are accepted - a
greyscale single-scan file, and an interlaced YUV (YCbCr) file.

A non-zero error code is returned if an error occurred. Reason code in
  cinfo->error_code           (same as returned result)
  cinfo->error_argument       (any additional argument)
Typical reasons include an unacceptable or badly formed JPEG file.

cinfo must point to cinfo->workspace_size bytes of available workspace. This
should be about 50K for typical JPEG files, or 20K + 4*16*max width of JPEG
file you wish to work with. If it's not big enough then
cinfo->error_argument is set to what it needs to be - you are welcome to
allocate more space and call again.

If the file is at the same address as the previous call, and a sample of the
data is the same, then jpeg_scan_file guesses that it's the same data - it's hard to
do a random update to the data of a JPEG file.

width and height say how big the resulting image should be - complain if not
precisely correct. If double size and band buffer is big enough, interpolate
upwards If width==-1 the width test is omitted. If height==-1 the height
test is omitted.

(It would be wonderful to feed in scale factors too, so that strange combinations of
scaling, interpolation etc. made sensible decisions. Unfortunately this requires the
calling code to be prepared to accept an output of an unexpected size, say by a factor
of 2 or 8. Not this time.)

Valid options to pass in 'options':
*/
#define jopt_GREY 1        /* greyscale output is acceptable, even if the file is colour */
#define jopt_DC_ONLY 2     /* Do only the DC values of the tiles - faster, less accurate */
#define jopt_INTERP_X 4    /* interpolate in the X direction */
#define jopt_OUTBPP_8 8    /* output 8bit pixels (assume standard palette) */
#define jopt_OUTBPP_16 16  /* output 16bit pixels */
#define jopt_OUTBPP_8YUV 32 /* output 8bit pixels - different method inside (assume std palette) */
#define jopt_DIFFUSE 64     /* error diffuse data to palette entries */
#define jopt_OUTBPP_8GREY 128 /* output 8bit grey pixels (assume need ascending grey palette) */

/* Interpolate in the X direction takes twice as much store, and will only be done if
it will fit. On return, if it was requested, cinfo->error_argument1 will have
jopt_INTERP_X set if the interpolation is enabled. jopt_OUTBPP_8 and jopt_OUTBPP_16
are similar, they constitute a request and they only happen if the corresponding
bits of cinfo->error_argument1 are set on exit. */

#define jopt_HUFF_ONLY 0x10000 /* for timing only - just do the huffman decoding */
#define jopt_DCT_ONLY  0x20000 /* for timing only - just do huffman and DCT, not colour transform */

int *jpeg_find_line(decompress_info_ptr cinfo, int ycoord, int *palette_data);
/* Return a pointer to the fully decompressed scan line of 32-bit pixels at the given y coordinate.
This might be in the already-decompressed band buffer, or it might require decompression
of a band. Only pixels between xmin and xmax in the original scan-file are assured of being correct.

If ycoord is outside the acceptable range (0..image_height-1) the result may well
be trash. */

/* errors for C to return to assembler */
#define ERROR_NO_MEMORY   1
#define ERROR_BAD_JPEG    2
#define ERROR_FATAL       4

#endif
