REM Copyright (c) 2010, RISC OS Open Ltd
REM All rights reserved.
REM
REM Redistribution and use in source and binary forms, with or without
REM modification, are permitted provided that the following conditions are met:
REM     * Redistributions of source code must retain the above copyright
REM       notice, this list of conditions and the following disclaimer.
REM     * Redistributions in binary form must reproduce the above copyright
REM       notice, this list of conditions and the following disclaimer in the
REM       documentation and/or other materials provided with the distribution.
REM     * Neither the name of RISC OS Open Ltd nor the names of its contributors
REM       may be used to endorse or promote products derived from this software
REM       without specific prior written permission.
REM
REM THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
REM AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
REM IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
REM ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
REM LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
REM CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
REM SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
REM INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
REM CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
REM ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
REM POSSIBILITY OF SUCH DAMAGE.

ON ERROR PRINT REPORT$;" at ";ERL : END

DIM code% 8
DIM temp% 128

REM VFPSupport_Version
SYS "VFPSupport_Version" TO A
PRINT "VFPSupport version ";(A/100)

REM VFPSupport_Features
SYS "VFPSupport_Features" TO A,B,C
PRINT "FPSID = &";FNhex8(A)
PRINT "MVFR0 = &";FNhex8(B)
PRINT "MVFR1 = &";FNhex8(C)

REM VFPSupport_CheckContext
FOR A=-1 TO 33
PRINT "Privileged context with ";A;" regs: ";
SYS "XVFPSupport_CheckContext",0,A TO B;flags%
IF flags% AND 1 THEN PRINT FNerr(B) ELSE PRINT ;B;" bytes"
PRINT "Usermode context with ";A;" regs: ";
SYS "XVFPSupport_CheckContext",1,A TO B;flags%
IF flags% AND 1 THEN PRINT FNerr(B) ELSE PRINT ;B;" bytes"
PRINT "Bad context with ";A;" regs: ";
SYS "XVFPSupport_CheckContext",NOT 1,A TO B;flags%
IF flags% AND 1 THEN PRINT FNerr(B) ELSE PRINT ;B;" bytes"
NEXT A

REM VFPSupport_FastAPI
SYS "VFPSupport_FastAPI" TO fast_wp%,fast_check%,fast_create%,fast_destroy%,fast_change%
PRINT "FastAPI:"
PRINT "  Workspace = &";FNhex8(fast_wp%)
PRINT "  CheckContext = &";FNhex8(fast_check%)
PRINT "  CreateContext = &";FNhex8(fast_create%)
PRINT "  DestroyContext = &";FNhex8(fast_destroy%)
PRINT "  ChangeContext = &";FNhex8(fast_change%)

REM Test this bit multiple times, with different contexts active each time
FOR L=0 TO 2

  CASE L OF
    WHEN 0: PRINT '"Testing with current context active"'
    WHEN 1: PRINT '"Testing with null context active"'
      PROCChangeContext(0,0,really_orig_ctx%)
    WHEN 2: PRINT '"Testing with non-null context active"'
      nonnull%=FNCreateContext(&80000001,16,really_orig_ctx%)
  ENDCASE

  REM VFPSupport_ActiveContext
  SYS "VFPSupport_ActiveContext" TO orig_ctx%
  PRINT "Currently active context: &";FNhex8(orig_ctx%)
  IF orig_ctx%<>0 THEN PROCExamine(orig_ctx%,0)

  PRINT '"Checking context creation/deletion"'

  new%=FNCreateContext(1,16,orig_ctx%)
  PRINT "Destroying context"
  PROCDestroyContext(new%,orig_ctx%,new%)

  PRINT '"Checking context change & VFP operation"'

  test1%=FNCreateContext(&80000001,16,orig_ctx%)
  PRINT "Fill with some known value"
  FOR A%=0 TO 31
    temp%!(A%*4)=A%+&100
  NEXT A%
  PROCvldm(temp%,16)
  PRINT "Serialise the context and examine the regs"
  B%=FNGetRegs(test1%)
  FOR A%=0 TO 31
    IF temp%!(A%*4)<>B%!(A%*4) THEN PRINT "ERROR: Serialised context doesn't contain the right data at offset ";A%*4;" following nonlzay activation" : END
  NEXT A%
  test2%=FNCreateContext(1,16,test1%)
  PRINT "Check lazy activation"
  FOR A%=0 TO 31
    temp%!(A%*4)=A%+&200
  NEXT A%
  PROCChangeContext(test2%,1,test1%)
  SYS "VFPSupport_ExamineContext",test2%,0 TO flags%
  IF (flags% AND (1<<29))=0 THEN PRINT "WARNING: Context was activated non-lazily"
  PROCvldm(temp%,16)
  PRINT "Serialise the context and examine the regs"
  B%=FNGetRegs(test2%)
  FOR A%=0 TO 31
    IF temp%!(A%*4)<>B%!(A%*4) THEN PRINT "ERROR: Serialised context doesn't contain the right data at offset ";A%*4;" following lazy activation" : END
  NEXT A%
  PRINT "Check that writing to a context's register dump causes that data to be loaded on next activation"
  B%=FNGetRegs(test1%)
  FOR A%=0 TO 31
    B%!(A%*4)=A%+&300
  NEXT A%
  PROCChangeContext(test1%,1,test2%)
  PROCvstm(temp%,16)
  FOR A%=0 TO 31
    IF temp%!(A%*4)<>B%!(A%*4) THEN PRINT "ERROR: Reactivated context loaded wrong data at offset ";A%*4 : END
  NEXT A%
  PRINT "Activate test2% lazily ontop of test1%, then delete test1%"
  PROCChangeContext(test2%,1,test1%)
  PROCDestroyContext(test1%,0,test2%)
  PRINT "Delete test2% and switch back to original"
  PROCDestroyContext(test2%,0,test2%)
  PROCChangeContext(orig_ctx%,0,0)

  REM Restore previous state
  CASE L OF
    WHEN 0:
      really_orig_ctx% = orig_ctx%
    WHEN 1: PRINT '"Restoring original context &";FNhex8(really_orig_ctx%)
      PROCChangeContext(really_orig_ctx%,0,prev%)
    WHEN 2: PRINT '"Restoring original context &";FNhex8(really_orig_ctx%)
      PROCDestroyContext(nonnull%,really_orig_ctx%,nonnull%)
  ENDCASE
NEXT L

PRINT '"Lazily activate the null context and see what happens"'
PROCChangeContext(0,1,really_orig_ctx%)
errored%=FALSE
ON ERROR errored%=TRUE
IF errored%=FALSE THEN PROCvldm(temp%,16)
IF errored%=FALSE THEN PRINT "ERROR: VDLM with lazy null context didn't produce error" : END
ON ERROR PRINT REPORT$;" at ";ERL : END

PRINT '"Tests complete"'

END

REM VFPSupport_ExmaineContext
DEF PROCExamine(ctx%,serialise%)
  LOCAL flags%,regs%,status%,format%,dump%,reg%,type%,offset%
  IF ctx%=0 THEN ENDPROC
  SYS "VFPSupport_ExamineContext",ctx%,serialise% TO flags%,regs%,status%,format%,dump%
  PRINT "Context &";FNhex8(ctx%);" status:"
  PRINT "  Flags = &";FNhex8(flags%);":"
  IF flags% AND 1 THEN PRINT "    Supports usermode operation" ELSE PRINT "    Privileged operation only"
  IF flags% AND (1<<29) THEN PRINT "    Awaiting lazy activation" ELSE PRINT "    Not awaiting lazy activation"
  IF flags% AND (1<<30) THEN PRINT "    Status registers active" ELSE PRINT "    Status registers inactive"
  IF flags% AND (1<<31) THEN PRINT "    Memory allocated by VFPSupport" ELSE PRINT "    Memory allocated by user"
  IF flags% AND &1FFFFFFE THEN PRINT "    Unknown flag bits set!"
  PRINT "  Register count = ";regs%
  PRINT "  Register status = &";FNhex8(status%)
  PRINT "  Dump at &";FNhex8(dump%);" format &";FNhex8(format%);":"
  WHILE format%!0<>-1
    type%=format%?0 + ((format%?1)<<8)
    offset%=format%?2 + ((format%?3)<<8)
    format%+=4
    PRINT "    Type ";type%;" offset ";offset%;": ";
    CASE type% OF
      WHEN 0: PRINT "FPSCR=&";FNhex8(dump%!offset%)
      WHEN 1: PRINT "FPEXC=&";FNhex8(dump%!offset%)
      WHEN 2: PRINT "FPINST=&";FNhex8(dump%!offset%)
      WHEN 3: PRINT "FPINST2=&";FNhex8(dump%!offset%)
      WHEN 4: PRINT "FLDMX/FSTMX format word=&";FNhex8(dump%!offset%)
      WHEN 5: PRINT "Register dump:"
        FOR reg%=0 TO regs%-1
          PRINT "      D";reg%;" = &";FNhex8(dump%!(offset%+4));FNhex8(dump%!offset%)
          offset%+=8
        NEXT reg%
      OTHERWISE
        PRINT "Unknown!"
    ENDCASE
  ENDWHILE
ENDPROC

REM VFPSupport_CreateContext
DEF FNCreateContext(flags%,regs%,prev%)
  LOCAL new%,prev2%
  SYS "VFPSupport_CreateContext",flags%,regs%,0,0 TO new%,prev2%
  PRINT "Created context &";FNhex8(new%);" with ";regs%;" regs and flags &";FNhex8(flags%)
  PROCExamine(new%,0)
  SYS "VFPSupport_ActiveContext" TO active%
  IF flags% AND (1<<31) THEN
    IF prev2%<>prev% THEN PRINT "ERROR: Context &";FNhex8(prev2%);" was previously active, expected &";FNhex8(prev%) : END
    PROCExamine(prev2%,0)
    IF active%<>new% THEN PRINT "ERROR: Context &";FNhex8(active%);" is now active, expected &";FNhex8(new%) : END
  ELSE
    IF active%<>prev% THEN PRINT "ERROR: Context &";FNhex8(active%);" is now active, expected &";FNhex8(prev%) : END
  ENDIF
  PROCExamine(prev%,0)
  IF active%<>new% AND active%<>orig_ctx% THEN PROCExamine(active%,0)
=new%

REM VFPSupport_DestroyContext
DEF PROCDestroyContext(del%,new%,active%)
  LOCAL active2%
  SYS "VFPSupport_DestroyContext",del%,new% TO active2%
  IF del%=active% AND active2%<>new% THEN PRINT "ERROR: Should have switched to &";FNhex8(new%);" when deleting active context ";FNhex8(del%);" but instead switched to &";FNhex8(active2%) : PROCExamine(active2%,0) : END
  IF del%=active2% THEN PRINT "ERROR: Deleted context is still active!" : PROCExamine(del%,0) : END
ENDPROC

REM VFPSupport_ChangeContext
DEF PROCChangeContext(new%,flags%,prev%)
  LOCAL prev2%
  SYS "VFPSupport_ChangeContext",new%,flags% TO prev2%
  IF prev2%<>prev% THEN PRINT "ERROR: Context &";FNhex8(prev2%);" was active, was expecting &";FNhex8(prev%) : PROCExamine(prev2%,0) : END
  SYS "VFPSupport_ActiveContext" TO active%
  IF active%<>new% THEN PRINT "ERROR: Context &";FNhex8(new%);" now active, was expecting &";FNhex8(new%) : PROCExamine(active%,0) : END
ENDPROC

REM Convert error block to string
DEF FNerr(ptr%)
  LOCAL E$
  E$="Error &"+FNhex8(ptr%!0)+": "
  ptr%+=4
  WHILE ptr%?0<>0
    E$+=CHR$(ptr%?0)
    ptr%+=1
  ENDWHILE
=E$

DEF FNhex8(h%)
  LOCAL h$
  h$ = STR$~h%
=STRING$(8-LEN(h$),"0")+h$

REM Load 1-16 doublewords from A%, starting at D0
DEF PROCvldm(A%,count%)
  P%=code%
  [ OPT 0
  EQUD &EC900B00 + count%*2
  MOV pc,lr
  ]
  CALL code%
ENDPROC

REM Store 1-16 doublewords to A%, starting at D0
DEF PROCvstm(A%,count%)
  P%=code%
  [ OPT 0
  EQUD &EC800B00 + count%*2
  MOV pc,lr
  ]
  CALL code%
ENDPROC

DEF FNGetRegs(ctx%)
  LOCAL format%,dump%,type%,offset%
  SYS "VFPSupport_ExamineContext",ctx%,1 TO ,,,format%,dump%
  WHILE format%!0<>-1
    type%=format%?0 + ((format%?1)<<8)
    offset%=format%?2 + ((format%?3)<<8)
    format%+=4
    IF type%=5 THEN =dump%+offset%
  ENDWHILE
  PRINT "ERROR: Failed to find registers in context dump" : END
