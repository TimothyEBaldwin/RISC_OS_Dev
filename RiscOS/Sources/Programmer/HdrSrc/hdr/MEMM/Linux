; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Access privilege bits
; I'm afraid we can't be selective

AP_ROM  *       2_101           ; user read-only,  svc read-only
AP_None *       2_111           ; user no access,  svc read/write
AP_Read *       2_111           ; user read-only,  svc read/write
AP_Full *       2_111           ; user read/write, svc read/write

; MMU control register bits

MMUC_M  *       1 :SHL: 0       ; MMU enable
MMUC_A  *       1 :SHL: 1       ; Address fault enable
MMUC_C  *       1 :SHL: 2       ; Cache enable (or Data cache enable)
MMUC_W  *       1 :SHL: 3       ; Write buffer enable
MMUC_P  *       1 :SHL: 4       ; 32-bit program space enable
MMUC_D  *       1 :SHL: 5       ; 32-bit data space enable
MMUC_L  *       1 :SHL: 6       ; Late abort mode enable
MMUC_B  *       1 :SHL: 7       ; Big-endian mode enable
MMUC_S  *       1 :SHL: 8       ; S-mode enable
MMUC_R  *       1 :SHL: 9       ; R-mode enable (ARM7 or later)
MMUC_F  *       1 :SHL: 10      ; Coprocessor frequency bit (ARM700 only)
MMUC_Z  *       1 :SHL: 11      ; Branch predictor enable
MMUC_I  *       1 :SHL: 12      ; Instruction cache enable
MMUC_V  *       1 :SHL: 13      ; High exception vectors
MMUC_RR *       1 :SHL: 14      ; Round-robin replacement
MMUC_L4 *       1 :SHL: 15      ; Disable ARMv5 "load Thumb state with PC" behaviour
MMUC_nF *       1 :SHL: 30      ; not FastBus (ie separate CPUCLK from MEMCLK)
MMUC_iA *       1 :SHL: 31      ; Asynchronous

L1_APMult * 1
L2_APMult * 1
L2T_APMult * 1
L2X_APMult * 1

L1_C    * 1
L1_B    * 1
L2_C    * 1
L2_B    * 1

        END
