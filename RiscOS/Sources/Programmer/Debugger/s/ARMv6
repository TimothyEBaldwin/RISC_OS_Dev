; Copyright 2004 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; File:    ARMv6.s
; Purpose: Disassembly of ARMv6 instructions
; Author:  K Bracey
; History: 23-Feb-00: KJB: created

 [ ARMv6

LdrexStrex ROUT
        ; arrive here with cccc 0001 1xxx xxxx xxxx xxxx 1001 xxxx
        ; format is        cccc 0001 100l nnnn dddd 1111 1001 mmmm
        ;
        ; LDREX{cond} Rd,[Rn]
        ; STREX{cond} Rd,Rm,[Rn]
        ;
        ; where cccc = condition
        ;          l = Load/~Store
        ;       nnnn = Rn
        ;       dddd = Rd
        ;       mmmm = Rm (=1111 for LDREX)
        AND     r5, r4, #2_1111:SHL:8
        TEQ     r5, #2_1111:SHL:8
        TSTEQS  r4, #2_0110:SHL:20
        BNE     Undefined

        [ WarnARMv6
        MOV     r14, #Mistake_ARMv6
        STR     r14, Mistake
        ]

        TestStr 20,Ldrex,Strex,conds

        MOV     r9,r4,LSR #16
        AND     r9,r9,#2_1111           ; Rn

        MOV     R5,R4,LSR #12
        AND     r5,r5,#2_1111           ; Rd

        AND     r6,r4,#2_1111           ; Rm

        ; Rd=Rn & STREX -> unpredictable
        TestBit 20
        TEQEQS  r5,r9
        MOVEQ   r14,#Mistake_RdRn
        STREQ   r14,Mistake

        ; Rm=Rd -> unpredictable
        TEQS    r6,r5
        MOVEQ   r14,#Mistake_RdRm
        STREQ   r14,Mistake

        ; any reg=R15 -> unpredictable
        TEQS    r5,#15
        TEQNES  r9,#15
        MOVEQ   r14,#Mistake_R15
        STREQ   r14,Mistake

        BL      Tab_Dis_Register
        TestBit 20
        MOVEQ   r5, r6
        BEQ     SwpCommon1
        ; Load case - Rm field must be 15
        TEQS    r6, #15
        BEQ     SwpCommon2
        B       Undefined

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

maal
        ; Multiply-Accumulate-Accumulate long
        ; Arrive here with cccc 0000 0100 xxxx xxxx xxxx 1001 xxxx
        ; Format is        cccc 0000 0100 hhhh llll ssss 1001 mmmm
        ;
        ; UMAAL{cond}{S} RdLo,RdHi,Rm,Rs
        ;
        ; where cccc = condition
        ;       hhhh = RdHi
        ;       llll = RdLo
        ;       ssss = Rs
        ;       mmmm = Rm
        ;
        ; (RdHi,RdLo) := Rm*Rs + RdLo + RdHi

        [ WarnARMv6
        MOV     r14, #Mistake_ARMv6     ; all instructions here are ARMv6
        STR     r14, Mistake
        ]

        AddStr  Umaal,,conds

Dis_RlRhRmRs
        BL      TabOrPushOver

        MOV     r5, r4, LSR #12         ; RdLo
        AND     r6, r5, #2_1111
        BL      Dis_Register

        MOV     r5, r4, LSR #16         ; RdHi
        AND     r7, r5, #2_1111
        BL      Comma_Dis_Register

        MOV     r5, r4                  ; Rm
        AND     r8, r5, #2_1111
        BL      Comma_Dis_Register

        MOV     r5, r4, LSR #8          ; Rs
        AND     r9, r5, #2_1111
        BL      Comma_Dis_Register

        ; Can't use R15 as any register, unpredictable
        ; if RdLo=RdHi
        LDR     r14, Mistake
        TEQS    r6, r7
        MOVEQ   r14, #Mistake_RdLoRdHi
        TEQS    r6, #15
        TEQNES  r7, #15
        TEQNES  r8, #15
        TEQNES  r9, #15
        MOVEQ   r14, #Mistake_R15
        STR     r14, Mistake

        B       InstructionEnd

Ldrex   DCB     "LDREX", 0
Strex   DCB     "STREX", 0
Umaal   DCB     "UMAAL", 0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ControlExtension_uncond
        ; arrive here with 1111 00i1 0xx0 xxxx xxxx xxxx rxxs xxxx
        ; (irs != 011)
        ;
        [ WarnARMv6
        MOV     r14, #Mistake_ARMv6     ; all instructions here are ARMv6
        STR     r14, Mistake
        ]

        ; format is        1111 0001 0000 0001 0000 00e0 0000 0000
        ;
        ; SETEND   <BE|LE>
        ;
        ; where    e = BE/~LE

        TSTS    r4, #2_11111111
        TSTEQS  r4, #2_11111101:SHL:8
        TSTEQS  r4, #2_11111110:SHL:16
        TSTEQS  r4, #2_00001110:SHL:24
        BNE     Undefined
        TestBit 16
        BEQ     Undefined

        AddStr  Setend
        BL      Tab
        TestBit 9,"B","L"
        AddChar "E"
        B       InstructionEnd

Setend  DCB     "SETEND",0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

UndefinedExtension ROUT
        ; arrive here with cccc 011x xxxx xxxx xxxx xxxx xxx1 xxxx

        [ WarnARMv6
        MOV     r14, #Mistake_ARMv6     ; all instructions here are ARMv6
        STR     r14, Mistake
        ]

        TestBit 24
        BNE     Mulv6
        TestBit 23
        BEQ     Parallel

        ; arrive here with cccc 0110 1xxx xxxx xxxx xxxx xxx1 xxxx
        ; will need to figure out best way of splitting as we add more opcodes
        TSTS    r4, #2_111 :SHL: 20
        BEQ     is_SEL
        AND     r5, r4, #2_011 :SHL: 20
        TEQ     r5, #2_011 :SHL: 20
        BNE     Undefined
        AND     r6, r4, #2_11 :SHL: 5
        TEQ     r6, #2_01 :SHL: 5
        BNE     Undefined

is_REV
        ; arrive here with cccc 0110 1x11 xxxx xxxx xxxx x011 xxxx
        ; format is        cccc 0110 1s11 1111 dddd 1111 h011 mmmm
        ;
        ; <REV|REV16|REVSH>{cond} Rd,Rm
        ;
        ; where cccc = condition
        ;          s = sign-extend
        ;       dddd = Rd
        ;       mmmm = Rm
        ;          h = half-word      (s=1 & h=0 is undefined)
        AND     r5, r4, #2_1111:SHL:8
        TEQ     r5, #2_1111:SHL:8
        BNE     Undefined
        AND     r5, r4, #2_1111:SHL:16
        TEQ     r5, #2_1111:SHL:16
        BNE     Undefined
        TestBit 22
        BNE     %FT2
        TestStr 7,Rev16,Rev,conds
        B       %FT3
2
        TestBit 7
        BEQ     Undefined
        AddStr  RevSH,,conds
3
        MOV     r5, r4, LSR #12
        AND     r5, r5, #15
        AND     r6, r4, #15
        TEQS    r5, #15
        TEQNES  r6, #15
        MOVEQ   lr, #Mistake_R15
        STREQ   lr, Mistake
        BL      Tab_Dis_Register
        MOV     r5, r4
        BL      Comma_Dis_Register
        B       InstructionEnd

is_SEL
        ; arrive here with cccc 0110 1000 xxxx xxxx xxxx xxx1 xxxx
        ; format is        cccc 0110 1000 nnnn dddd 0000 1011 mmmm
        ;
        ; SEL{cond} Rd,Rn,Rm
        ;
        ; where cccc = condition
        ;       nnnn = Rn
        ;       dddd = Rd
        ;       mmmm = Rm
        AND     r5, r4, #2_11111111:SHL:4
        TEQ     r5, #2_00001011:SHL:4
        BNE     Undefined
        AddStr  Sel,,conds
        BL      Tab
        B       Dis_RdRnRm

Rev     DCB     "REV",0
Rev16   DCB     "REV16",0
RevSH   DCB     "REVSH",0
Sel     DCB     "SEL",0
        ALIGN

Parallel
        ; arrive here with cccc 0110 0xxx xxxx xxxx xxxx xxx1 xxxx
        ; format is        cccc 0110 0ppp nnnn dddd 1111 ooo1 mmmm
        ;
        ; <S|Q|SH|U|UQ|UH><ADD8|ADD16|SUB8|SUB16|ADDSUBX|SUBADDX>{cond}
        ;                                                      Rd,Rn,Rm
        ;
        ; where cccc = condition
        ;        ppp = prefix
        ;       nnnn = Rn
        ;       dddd = Rd
        ;        ooo = op
        ;       mmmm = Rm

        ANDS    r5, r4, #2_011:SHL:20
        BEQ     Undefined
        AND     r5, r4, #2_1111:SHL:8
        TEQS    r5, #2_1111:SHL:8
        BNE     Undefined

        ADR     r10,ParallelPrefixTAB-3
        AND     r5, r4, #2_111:SHL:20
        ADD     r5, r5, r5, LSL #1
        ADD     r10, r10, r5, LSR #20
        BL      SaveString
        TSTS    r8, #1:SHL:5                    ; then bit 6 = bit 5
        BNE     Undefined
        TestStr 6,ParSub,ParAdd
        EOR     r8, r4, r4, LSR #1
        TSTS    r8, #1:SHL:5
        BEQ     %FT01
        ; bit 5 != bit 6
        TestBit 7
        BNE     Undefined
        TestStr 5,ParSub,ParAdd
        AddChar "X"
        B       %FT02
01
        TestStr 7,Par8,Par16
02
        BL      Conditions
        BL      TabOrPushOver

Dis_RdRnRm
        MOV     r5, r4, LSR #12         ; Rd
        AND     r6, r5, #2_1111
        BL      Dis_Register

        MOV     r5, r4, LSR #16         ; Rn
        AND     r7, r5, #2_1111
        BL      Comma_Dis_Register

        MOV     r5, r4                  ; Rm
        AND     r8, r5, #2_1111
        BL      Comma_Dis_Register

        ; Can't use R15 as any register
        TEQS    r6, #15
        TEQNES  r7, #15
        TEQNES  r8, #15
        MOVEQ   r14, #Mistake_R15
        STREQ   r14, Mistake

        B       InstructionEnd

ParallelPrefixTAB
        DCB     "S",0,0
        DCB     "Q",0,0
        DCB     "SH",0
        DCB     0,0,0
        DCB     "U",0,0
        DCB     "UQ",0
        DCB     "UH",0
ParAdd  DCB     "ADD",0
ParSub  DCB     "SUB",0
Par8    DCB     "8",0
Par16   DCB     "16",0
        ALIGN

Mulv6
        ; arrive here with cccc 0111 xxxx xxxx xxxx xxxx xxx1 xxxx
        ANDS    r5, r4, #2_1111:SHL:20
        BEQ     DualSignedMultiplySum
        TEQS    r5, #2_0100:SHL:20
        BEQ     DualSignedMultiplySumLong
        TEQS    r5, #2_0101:SHL:20
        BEQ     SignedMultiplyMSB
        TEQS    r5, #2_1000:SHL:20
        BEQ     SumAbsoluteDifferences
        B       Undefined

DualSignedMultiplySum
        ; arrive here with cccc 0111 0000 xxxx xxxx xxxx xxx1 xxxx
        ; format is        cccc 0111 0000 dddd nnnn ssss 0sx1 mmmm
        ;
        ; <SMUAD|SMUSD>{X}{cond}  Rd,Rm,Rs
        ; <SMLAD|SMLSD>{X}{cond}  Rd,Rm,Rs,Rn
        ;
        ; where cccc = condition
        ;       dddd = Rd
        ;       nnnn = Rn  (=1111 for SMUxD)
        ;       ssss = Rs
        ;          s = Subtract/~Add
        ;          x = eXchange
        ;       mmmm = Rm
        ;
        ; Rd = (RmLo*RsLo) +/- (RmHi*RsHi)         [X swaps RsHi/RsLo]
        ; Rd = (RmLo*RsLo) +/- (RmHi*RsHi) + Rn

        TestBit 7
        BNE     Undefined
        AddChar "S"
        AddChar "M"
        AND     r5, r4, #2_1111:SHL:12
        TEQS    r5, #2_1111:SHL:12
        MOVEQ   r10, #"U"
        MOVNE   r10, #"L"
        STRB    R10,[R0],#1
        TestBit 6,"S","A"
        AddChar "D"
        TestBit 5,"X"
        BL      Conditions
        BL      TabOrPushOver

Dis_RdRmRs_OptRn
        AND     r8, r4, #15
        MOV     r6, r4, LSR #8
        AND     r6, r6, #15
        MOV     r5, r4, LSR #16
        AND     r5, r5, #15
        TEQS    r8, #15
        TEQNES  r6, #15
        TEQNES  r5, #15
        MOVEQ   r14, #Mistake_R15
        STREQ   r14, Mistake

        BL      Dis_Register
        MOV     r5, r4
        BL      Comma_Dis_Register
        MOV     r5, r4, LSR #8
        BL      Comma_Dis_Register
        MOV     r5, r4, LSR #12
        AND     r5, r5, #15
        TEQ     r5, #15
        BLNE    Comma_Dis_Register

        B       InstructionEnd

DualSignedMultiplySumLong
        ; arrive here with cccc 0111 0100 xxxx xxxx xxxx xxx1 xxxx
        ; format is        cccc 0111 0100 hhhh llll ssss 0sx1 mmmm
        ;
        ; <SMLALD|SMLSLD>{X}{cond}  RdLo,RdHi,Rm,Rs
        ;
        ; where cccc = condition
        ;       hhhh = RdHi
        ;       llll = RdLo
        ;       ssss = Rs
        ;          s = Subtract/~Add
        ;          x = eXchange
        ;       mmmm = Rm
        ;
        ; (RdHi,RdLo) += (RmLo*RsLo) +/- (RmHi*RsHi)     [X swaps RsHi/RsLo]

        TestBit 7
        BNE     Undefined
        TestStr 6,Smlsld,Smlald
        TestBit 5,"X"
        BL      Conditions
        B       Dis_RlRhRmRs

SignedMultiplyMSB
        ; arrive here with cccc 0111 0101 xxxx xxxx xxxx xxx1 xxxx
        ; format is        cccc 0111 0101 dddd nnnn ssss ssr1 mmmm
        ;
        ; SMMUL{R}{cond}         Rd,Rm,Rs
        ; <SMMLA|SMMLS>{R}{cond} Rd,Rm,Rs,Rn
        ;
        ; where cccc = condition
        ;       dddd = Rd
        ;       nnnn = Rn  (=1111 for SMMUL)
        ;       ssss = Rs
        ;         ss = Subtract/~Add (=0 for SMMUL)
        ;          r = Round
        ;       mmmm = Rm
        ;
        ; Rd := (Rm*Rs).Hi
        ; Rd := (Rm*Rs).Hi +/- Rn
        EOR     r5, r4, r4, LSR #1
        TSTS    r5, #1:SHL:6
        BNE     Undefined               ; bit 6 must equal bit 7

        AND     r5, r4, #2_1111:SHL:12
        TEQ     r5, #2_1111:SHL:12
        BEQ     %FT01
        TestStr 6,Smmls,Smmla
        B       %FT02
01
        AddStr  Smmul
        TestBit 6
        BNE     Undefined
02
        TestBit 5,"R"
        BL      Conditions
        BL      TabOrPushOver

        B       Dis_RdRmRs_OptRn

SumAbsoluteDifferences
        ; arrive here with cccc 0111 1000 xxxx xxxx xxxx xxx1 xxxx
        ; format is        cccc 0111 1000 dddd nnnn ssss 0001 mmmm
        ;
        ; USAD8{cond}    Rd,Rm,Rs
        ; USADA8{cond}   Rd,Rm,Rs,Rn
        ;
        ; where cccc = condition
        ;       dddd = Rd
        ;       nnnn = Rn  (=1111 for USAD8)
        ;       ssss = Rs
        ;          a = Halfword/~Byte
        ;       mmmm = Rm
        ;
        ; Rd = |Rm.3-Rs.3| + |Rm.2-Rs.2| + |Rm.1-Rs.1| + |Rm.0-Rs.0|
        ; Rd = |Rm.3-Rs.3| + |Rm.2-Rs.2| + |Rm.1-Rs.1| + |Rm.0-Rs.0| + Rn

        TSTS    r4, #2_111:SHL:5
        BNE     Undefined
        AddStr  Usad
        AND     r5, r4, #2_1111:SHL:12
        TEQ     r5, #2_1111:SHL:12
        AddChar "A",NE
        AddChar "8"
        BL      Conditions
        BL      TabOrPushOver
        B       Dis_RdRmRs_OptRn

Smmul   DCB     "SMMUL",0
Smmla   DCB     "SMMLA",0
Smmls   DCB     "SMMLS",0
Smlald  DCB     "SMLALD",0
Smlsld  DCB     "SMLSLD",0
Usad    DCB     "USAD",0

        ALIGN

 ] ; ARMv6

        LNK     s.FP
