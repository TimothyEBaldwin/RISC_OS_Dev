/*
 * Copyright (c) 2020, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef UTILS_H
#define UTILS_H

#include <stdbool.h>
#include "wimp.h"

#define NO_WINDOW ((wimp_w) -1)
#define NO_ICON ((wimp_i) -1)

typedef enum {
	SCROLL_EXTENDED,
	SCROLL_NORMAL,
	SCROLL_MANUAL,
} scroll_mode;

typedef struct {
	wimp_w w;
	wimp_i i;
	scroll_mode mode;
	bool x,y; /* Which directions can we scroll in? */
} scroll_target;

extern void utils_free(void);

/* Does this specific icon support scrolling? */
extern bool does_icon_support_scrolling(wimp_w w,wimp_i i,const wimp_icon *icon);

/* Examine the given window / icon to determine whether it's scrollable
   On failure, can set *is_pane if the window is a pane (i.e. we should check its parent next) */
extern scroll_target examine_window(wimp_w w,wimp_i i,bool *is_pane);

/* Starting from the given window & icon, find a scrollable window */
extern scroll_target find_scrollable_window(wimp_w w,wimp_i i);

/* Return the topmost window (0 for caret or 1 for mouse), -1 on error */
extern int topmost_window(wimp_w caret,wimp_w mouse);

#endif
