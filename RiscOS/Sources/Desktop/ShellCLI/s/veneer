; Copyright (c) 2020, Julie Stamp
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Shell
        GET     Hdr:ModHand

        EXPORT  _my_entermodule
        EXPORT  _my_exitmodule
        EXPORT  exit_veneer
        EXPORT  error_veneer
        EXPORT  xshell_create
        EXPORT  xshell_destroy

        IMPORT  module_enter
        IMPORT  exit_handlerC
        IMPORT  error_handlerC
        IMPORT  |_Lib$Reloc$Off$DP|

STACK_SIZE      * 4 * 1024

        AREA    |Veneer$$Code|, CODE, READONLY
_my_entermodule
        MOV     R4,R0                   ; Setup a stack
        MOV     R0,#ModHandReason_Claim
        MOV     R3,#STACK_SIZE
        SWI     OS_Module
        ADD     R13,R2,R3
        Push    "R2"                    ; Remember it for when we finish

        MOV     R5,R12
        LDR     R12,[R12]               ; Copy relocations to bottom of stack
        MOV     R10,R2
        LDMIB   R12,{R11,R12}
        STMIA   R10,{R11,R12}
        DCD     |_Lib$Reloc$Off$DP| + 0xE28AA000

        ; void module_enter(char const *command_tail, void *pw, void *stack )
        MOV     R0,R4
        MOV     R1,R5
        MOV     R2,R13
        BL      module_enter
        MOV     R0,#ModHandReason_Free  ; Free the stack
        Pull    "R2"
        SWI     OS_Module
        SWI     XOS_Exit

; We won't return from module_enter if our exit handler is called,
; so we deal with that here instead
; On entry, R0 points to the top of the stack - 4
_my_exitmodule
        MOV     R2,R0
        SUB     R2,R2,#STACK_SIZE
        ADD     R2,R2,#4
        MOV     R0,#ModHandReason_Free  ; Free the stack
        SWI     OS_Module
        SWI     XOS_Exit

exit_veneer
        ; On entry USR, R12 points to the top of our private stack
        ; We already set the relocations up during module entry code,
        ; so all we have to do is use it!
        MOV     R13, R12
        SUB     R10, R13, #STACK_SIZE
        ; Whoops, we're keeping a word at the top of the stack
        ADD     R10, R10, #4
        DCD     |_Lib$Reloc$Off$DP| + 0xE28AA000
        B       exit_handlerC
        ; Shouldn't get here

error_veneer
        ; On entry USR, R0 points to the top of our private stack
        ; We already set the relocations up during module entry code,
        ; so all we have to do is use it!
        MOV     R13,R0
        SUB     R10,R13,#STACK_SIZE
        ADD     R10,R10,#4
        DCD     |_Lib$Reloc$Off$DP| + 0xE28AA000
        B       error_handlerC
        ; Shouldn't get here

xshell_create
        MOV     R12,R14
        SWI     XShell_Create
        MOVVC   R0,#0
        MOV     PC,R12

xshell_destroy
        MOV     R12,R14
        SWI     XShell_Destroy
        MOVVC   R0,#0
        MOV     PC,R12

        END
