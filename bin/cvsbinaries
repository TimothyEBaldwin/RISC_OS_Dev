#!/bin/perl
# 
# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 
# Search for filenames which match *,??? but not one of the text file types.
# Run "cvs admin -kb filename" on all.  Can batch filesnames.
sub failed {
  die("$0: $_[0] failed: $!\n");
};
sub binflush {
  system($test?('echo','cvs'):'cvs','admin','-kb',@binaries);
  @binaries=();
};
$batchcount=20;
$usage="Usage: $0 [--] <directory>\n";
# Usage: setbinaries <dir>
while($ARGV[0]=~/^-/) {
  $arg=shift @ARGV;
  if ($arg eq '--') {
    last;
  } elsif ($arg eq '-test') {
    $test=1;
    $|=1;
  } elsif ($arg eq '-debug') {
    $debug=shift @ARGV;
  } elsif ($arg eq '-batch') {
    $batchcount=shift @ARGV;
    if($batchcount<=0) {
      die("$0: Invalid batch count: $batchcount\n");
    };
  } else {
    die$usage;
  };
};
if($#ARGV!=0) {
  die$usage;
};
chdir($ARGV[0])||failed("chdir($ARGV[0])");
@stack=('.');
@binaries=();
# Register text types
foreach $x ('007','fe1','fea','feb','fd7','ffe','102', 'faf') {
  $text{$x}=1;
};
while(defined($next=pop @stack)) {
  if($debug&1) {
    print "Handling '$next'\n";
  };
  opendir(SRC,"$next")||
    die("Couldn't open directory $next: $!\n");
  while(defined($entry=readdir(SRC))) {
    if($debug&2) {
      print "Got entry '$entry'\n";
    };
    if($entry!~/^\.{1,2}$|^CVS$/) {
      if (-d "$next/$entry") {
        push @stack,"$next/$entry";
      } else {
	if($entry=~/,([0-9a-f]{3})$/&&!$text{$1}) {
	  push @binaries,"$next/$entry";
	  if($#binaries>=$batchcount-1) {
	    binflush;
	  };
	};
      };
    };
  };
  closedir(SRC);
};
if($#binaries>=0) {
  binflush;
};
