/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 * 
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 * 
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */

Search for transition:

     inword = current input word
              32 pixels with the leftmost being least significant

     lowsetbit = inword & -inword
     inword |= lowsetbit-1
     inword = !inword

     lowsetbit = inword & -inword
     inword |= lowsetbit-1
     inword = !inword

     etc. until lowsetbit=0, at which point we get the next word

Unfortunately we need the index of the bit position anyway, so this doesn't
save anything.

If xpath --> chain of current on/off pairs, ascending
   newxcoord[] = array to receive the next set of transitions
   nextx() returns the x-coord of the next x-transition

typedef struct xpathstr {
  struct xpathstr *link;
  int x,y;                 /* first one is a MOVE, all others are LINE */
} xpathstr;

typedef struct xpathheadstr {
  struct xpathheadstr *link;
  int x;
  xpathstr *path;
} xpathheadstr;

       inptr = <start of bottom row>;
       oldxpath = &xhead;
       xpath = xhead;                     /* may be null, else white/black transition */
       onx = findpixel(1);                 /* look for first black pixel */
       offx = findpixel(0);
       while (onx != big || xpath)       /* onx=big at end of row */
         while (xpath && xpath->x > offx) {
           newxpath = newblock(onx,oldxpath);  /* join up at the bottom */
           join(newxpath,onx,offx);
           addsides(newxpath);
         }
         while (xpath && xpath->offx < test.onx) {
           join(xpath,xpath->onx,xpath->offx);  /* join up at the top */
           writepath(xpath);
           unlink(&xpath,oldxpath);             /* remove from chain */
         }
         if (xpath && onx != big) {
           join(xpath,test.onx,test.offx);      /* join up at the sides */
           addsides(xpath);
           xpath = xpath->link;
         }
         readnextx(&test);
       }

void unlink(xpathheadstr **xpp, xpathheadstr **oldxpp)
{
  xpathheadstr *xpp2 = *xpp->link;
  free(*xpp);
  *oldxpp = *xpp = xpp2;
}


void join(xpathheadstr *xpath, int onx, int offx)
{
  register int x = xpath->onx;
  register int step = (onx<x) ? -1 : 1;

  for(;x!=onx;x+=step) {
    register xpathstr *xp = malloc(sizeof(xpathstr));
    xp->link = NULL;
    xp->x = x;
    xp->y = currenty;               /* static variable */
    xpath->lefttail->link = xp;
    xpath->lefttail = xp;
  }
  xpath->onx = x;

  x = xpath->offx;
  step = (offx<x) ? -1 : 1;
  for(;x!=offx;x+=step) {
    register xpathstr *xp = malloc(sizeof(xpathstr));
    xp->link = xpath->righthead;
    xp->x = x;
    xp->y = currenty;               /* static variable */
    xpath->righthead = xp;
  }
  xpath->offx = x;
}


void addsides(xpathheadstr *xpath)
{
  register xpathstr *xp = malloc(sizeof(xpathstr));
  xp->link = NULL;
  xp->x = xpath->onx;
  xp->y = currenty-1;             /* static variable */
  xpath->lefttail->link = xp;
  xpath->lefttail = xp;

  xp = malloc(sizeof(xpathstr));
  xp->link = xpath->righthead;
  xp->x = xpath->offx;
  xp->y = currenty-1;             /* static variable */
  xpath->righthead = xp;
}


static int user_outptr;
static int user_size;

void writepath(xpathheadstr *xpath)
{
  register xpathstr *xp = xpath->righthead;

  xp = outpath(MOVETO,xp);        /* frees block */
  while(xp) {
    xp = outpath(LINETO,xp);      /* frees block */
  }
}


xpathstr *outpath(int type,xpathstr *xp)
{
  register xpathstr *xp2 = xp->link;

  if (user_size < 12) error("Buffer overflow");

  *user_outptr++ = type;
  *user_outptr++ = xp->x << 8;
  *user_outptr++ = xp->y << 8;
  *user_outptr = 0;              /* leave pointing to terminator */
  user_size -= 12;

  free(xp);
  return(xp2);
}



 malloc(sizeof(xpathheadstr));
           newxpath->onx=test.onx;
           newxpath->offx=test.offx;
           newxpath->path=NULL;
           newxpath->link = *oldxpath;
           *oldxpath=newxpath;

           newxpath->offx = newxpath->onx;
           join(newxpath, test.onx, test.offx);

