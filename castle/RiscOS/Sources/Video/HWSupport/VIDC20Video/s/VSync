; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 

VSyncHandler
        Push    "r4, r9, lr"

      [ debugsy
        LDR     r1, VSyncCounts
        ADD     r1, r1, #1
        STR     r1, VSyncCounts
      ]

        ; Prepare r4 for the GraphicsV call before r12 gets trashed
        LDRB    r4, GVinstance
        MOV     r4, r4, LSL #24
        ORR     r4, r4, #GraphicsV_VSync

        ; Clear that interrupt (NB. HAL call might trash r12)
        LDR     r0, DevDesc
        LDR     r0, [r0, #HALDevice_Device]
        LDR     r9, ClearVSyncSB
        MOV     lr, pc
        LDR     pc, ClearVSyncFn

        ; Do flyback side effects
        MRS     r9, CPSR
        ASSERT  SVC32_mode :OR: IRQ32_mode = SVC32_mode
        ORR     lr, r9, #SVC32_mode
        MSR     CPSR_c, lr
        Push    "r9, lr"
        MOV     r9, #GraphicsV
        SWI     XOS_CallAVector
        Pull    "r9, lr"
        MSR     CPSR_c, r9
        
        Pull    "r4, r9, pc"

        END
