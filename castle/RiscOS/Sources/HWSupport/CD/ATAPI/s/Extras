; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; -> Extras.s














; This contains extra routines for the ATAPI driver


; Routines in here:
;                  Extras_GetDrawerStatus
;                  Extras_HasDiscChanged
;                  Extras_SetDiscChanged
;                  Extras_SetDrawerStatus
;                  Extras_ConvertControlBlockToDrive










;By MEW of Eesox.  8th May 1993

;--------------------------------------------------------------------------
Extras_HasDiscChanged ROUT
; on entry:
;          r0  =  drive number
;          r12 -> workspace
; on exit:
;          returns r0 = 0 or 1
;--------------------------------------------------------------------------

; This gets the current state, then clears it in the list


 Push      "r1, r14"

 ADR       r1, disc_changed_list

 LDRB      r0, [ r1, r0 ]!

 MOV       r14, # 0
 STRB      r14, [ r1 ]

 Pull      "r1, pc"

;--------------------------------------------------------------------------
Extras_SetDiscChanged ROUT
; on entry:
;          r0  =  drive number
;          r12 -> workspace
; on exit:
;          returns r0 = 0 or 1
;--------------------------------------------------------------------------
; This sets the current state


 Push      "r1, r14"

 MySTRIM   "Extras_SetDiscChanged"
 DisplayNewLine

 ADR       r1, disc_changed_list

 MOV       r14, # 1
 STRB      r14, [ r1, r0 ]

 Pull      "r1, pc"

;--------------------------------------------------------------------------
Extras_GetDrawerStatus ROUT
; on entry:
;          r0  =  drive number
;          r12 -> workspace
; on exit:
;          returns r0 = 0 or 1
;
; This gets the current state
;--------------------------------------------------------------------------


 Push      "r1, r14"

 ADR       r1, drawer_list

 LDRB      r0, [ r1, r0 ]

 Pull      "r1, pc"


;--------------------------------------------------------------------------
Extras_SetDrawerStatus ROUT
; on entry:
;          r0 =   drive number
;          r1 =   0 or 1
;          r7  -> control block
;          r12 -> workspace
; on exit:
;          all regs preserved
;--------------------------------------------------------------------------
; This sets the current state


 Push      "r2, r14"

 ADR       r2, drawer_list

 STRB      r1, [ r2, r0 ]

 Pull      "r2, pc"


;--------------------------------------------------------------------------
Extras_ConvertControlBlockToDrive ROUT
;
; on entry:
;          r7  -> control block
;          r12 -> workspace
;
; on exit:
;          VC and r0 = ATAPI drive number
;          VS and r0 -> error block
;
; This call will map the CDFS control block to the IDE drive number
;
;--------------------------------------------------------------------------

     Push          "r1-r10, r14"

     ADR           r2, DriveRecognisedStatus
     ADR           r1, DriveMapList
     MOV           r0, # 0

     LDMIA         r7, { r8, r9, r10 }

; r0 =  entry number being checked
; r1 -> DriveMapList
; r2 -> DriveRecognisedStatus
; r7 -> entry to match against

ECCBTD_Loop
     LDRB          r3, [ r2 ], # 1
     LDMIA         r1!, { r4, r5, r6, r14 }
   [ HAL
     CMP           r3, # 12 ; and clear V
     TEQNE         r3, # 16
   |
     CMP           r3, # TRUE ; and clear V
   ]
     TEQEQ         r4, r8
     TEQEQ         r5, r9
     TEQEQ         r6, r10
     Pull          "r1-r10, pc", EQ ; V is clear


     ADD           r0, r0, # 1
     CMP           r0, # MAX_NUMBER_OF_ATAPI_DRIVES

     BLT           ECCBTD_Loop

     MOV           r0, #DRIVERERROR__INVALID_PARAMETER
     SETV
     Pull          "r1-r10, pc"


;--------------------------------------------------------------------------
;--------------------------------------------------------------------------
;--------------------------------------------------------------------------
;--------------------------------------------------------------------------
;--------------------------------------------------------------------------


 END
