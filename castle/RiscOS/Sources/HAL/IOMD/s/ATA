; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
;
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
;
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     Hdr:HALDevice
        GET     Hdr:IDEDevice

        GET     hdr.StaticWS

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  IDEDevice_Init
        IMPORT  memcpy

                   ^ 0
                   # HALDevice_IDESize  ; Public bits
IDEDeviceHAL_SB    # 4
IDEDevice_IDE_Size # 0

IDEDevice_Init
        Push    "lr"
        ADRL    a1, IDEDeviceStruct
        ADR     a2, IDEDeviceTemplate
        MOV     a3, #IDEDevice_IDE_Size
        BL      memcpy

        STR     sb, [a1, #IDEDeviceHAL_SB]

        MOV     a2, a1
        MOV     a1, #0                  ; No flags
        CallOS  OS_AddDevice
        Pull    "pc"

IDEDeviceTemplate
        ; Public interface
        DCW     HALDeviceType_ExpCtl + HALDeviceExpCtl_IDE
        DCW     HALDeviceID_IDE_SMC37C66x
        DCD     HALDeviceBus_Sys + HALDeviceSysBus_OPEN
        DCD     &0000                   ; API version - 0.0
        DCD     IDEDeviceDesc
        DCD     0                       ; Address - N/A
        %       12                      ; Reserved
        DCD     IDE_Activate
        DCD     IDE_Deactivate
        DCD     IDE_Reset
        DCD     IDE_Sleep
        DCD     -1                      ; Device
        DCD     0                       ; TestIRQ cannot be called
        %       8
        ; Specifics for an IDE controller
        DCD     IDE_CableID
        DCD     IDE_ControllerInfo
        DCD     IDE_SetModes
        ASSERT  (.-IDEDeviceTemplate) = HALDevice_IDESize
        ; Controller's private data from here onwards
        DCD     0                       ; Copy of HAL's SB
        ASSERT  (.-IDEDeviceTemplate) = IDEDevice_IDE_Size
        ASSERT  ?IDEDeviceStruct = IDEDevice_IDE_Size

IDEDeviceDesc
        DCB     "SMSC 37C665 IDE controller", 0
        ALIGN

IDE_Activate
        MOV     a1, #1
IDE_Deactivate
IDE_Reset
        MOV     pc, lr

IDE_Sleep
        MOV     a1, #0
        MOV     pc, lr

; size_t ControllerInfo(struct idedevice *ide,
;                       int bus, union atainfo *info, size_t buflen)
IDE_ControllerInfo
        CMP     a2, #1                  ; bus limit
        MOVHS   a1, #0
        MOVHS   pc, lr

        Push    "a3,a4,v1-v5,sb,lr"
        LDR     sb, [a1, #IDEDeviceHAL_SB]
        MOV     v5, a2                  ; v5 = Controller number

        SUB     sp, sp, #12*4           ; construct on stack
        MOV     v1, sp

        MOV     a1, #2_1000             ; no 32-bit PIO, no 48-bit DMA
        STR     a1, [v1], #4


        ; Read command block address
        LDR     a1, C710_Address
        ADD     a1, a1, #0x00007c0

        STR     a1, [v1], #4

        ; Read control block address
        LDR     a1, C710_Address
        ADD     a1, a1, #0x0000fd0
        STR     a1, [v1], #4

        ; Read bus master address
        MOV     a1, #0

        STR     a1, [v1], #4

        TEQ     v5, #0
        MOV     a1, #9
        MOV     a2, #2_1            ; PIO modes 0
        MOV     a3, #0xff           ; No Multiword DMA modes
        MOV     a4, #0xff           ; No Ultra DMA modes
        STMIA   v1!, {a1-a4}

        MOV     a1, #0xffffffff
        MOV     a2, a1
        MOV     a3, a1
        MOV     a4, a1
        STMIA   v1!, {a1-a4}

        LDMIA   v1!, {a1,a3}            ; caller's buffer + length
        CMP     a3, #12*4
        MOVHI   a3, #12*4
        MOV     a2, sp

cplp    LDRB    v2,[a2],#1              ; copy in as much as possible
        STRB    v2,[a1],#1
        SUBS    a3,a3,#1
        BNE     cplp

        MOV     sp, v1

        MOV     a1, #12*4               ; say how much we gave them
        Pull    "v1-v5,sb,pc"

; void SetModes(struct idedevice *ide,
;               int bus, struct atamode *dev0, struct atamode *dev1)
IDE_SetModes ROUT
        CMP     a2, #1                  ; bus count
        MOVHS   pc, lr

        MOV     a1, #0xffffff00
        ORRS    a3, a3, a3
        STRNE   a1, [a3,#4]
        ORRS    a4, a4, a4
        STRNE   a1, [a4,#4]

        MOV     pc, lr

; bool CableID(struct idedevice *ide, int bus)
IDE_CableID ROUT
        MOV     a1, #0                  ; sensing unavailable
        MOV     pc, lr

        END
