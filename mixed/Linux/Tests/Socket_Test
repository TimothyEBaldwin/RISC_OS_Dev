SYS "OS_Module",6,,,80 TO ,,P%
[
.event_handler%
    TEQ r0, #19
    STMEQIA r12, {r0-r14}
    MOV pc, r14
.T% DCD 0
.R% DCD 0
]
SYS "OS_Claim",&10,event_handler%,R%
*FX 14 19

DIM A% 20

SYS "Socket_Creat",2,1,0 TO server%
SYS "Socket_Creat",2,1,0 TO client%
PRINT "Server   ";server%
PRINT "Client   ";client%

A%!0=&20B80002
A%!4=&0100007F
A%!8=0
A%!12=0
SYS "Socket_Bind",server%,A%,16
SYS "Socket_Listen",server%,4
SYS "Socket_Connect",client%,A%,16

SYS "Socket_Write",client%,A%,4
A%!16 = 16
SYS "Socket_Accept",server%,A%,A%+16 TO connected%
PRINT "Accepted ";connected%

SYS "Socket_Read",connected%,A%,8

!A%=1:SYS "Socket_Ioctl",connected%,&8004667E,A%
SYS "XSocket_Read",connected%,A%,8

!A%=1:SYS "Socket_Ioctl",connected%,&8004667D,A%

SYS "Socket_Write",client%,A%,4

REPEAT:UNTIL R%!0 = 19
PROCassert("R%!4  = 1")
PROCassert("R%!8  = connected%")
PROCassert("R%!12 = &20B8")

*FX 13 19
SYS "OS_Release",&10,event_handler%,R%

SYS "Socket_Close", server%
SYS "Socket_Close", client%
SYS "Socket_Close", connected%
END

DEF PROCassert(A$)
IF EVAL(A$) ENDPROC
ERROR EXT 0, "Assertion failed: " + A$

DEF PROCioctl(F%, C%, V%)
!T% = V%
SYS "Socket_Ioctl",connected%,&8004667D,A%
ENDPROC


