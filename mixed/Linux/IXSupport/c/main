/*
 * Copyright (c) 2015, Timothy Baldwin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "header.h"
#include "swis.h"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdint.h>

#include "Global/HALEntries.h"
#include "Global/OSMem.h"
#include "Global/OSWords.h"
#include "Global/OSBytes.h"
#include "Global/RISCOS.h"
#include "Global/Upcall.h"

extern const char fsinfo(void);
extern const char __module_header(void);
extern void stdin_handler(void);
extern char **__HAL_get_env(void);


_kernel_oserror *init(const char *cmd_tail, int podule_base, void *pw) {

  // Install interrupt handler for standard input.
  uintptr_t HAL_IRQClear;
  HAL_IRQClear = _swi(OS_Hardware, _INR(8, 9) | _RETURN(0), 1, EntryNo_HAL_IRQClear);
  _swi(OS_ClaimDeviceVector, _INR(0, 2), 0, stdin_handler, HAL_IRQClear);
  _swi(OS_Hardware, _IN(0) | _INR(8, 9), 0, 0, EntryNo_HAL_IRQEnable);


  // Copy Linux environment variables to RISC OS system variables.
  for(char **i = __HAL_get_env(); *i; ++i) {
    char *const limit = pd1.name + sizeof(pd1.name) - 1;
    char *s = *i, *d = pd1.name;
    if (memcmp(s, "RISC_OS_", 8) == 0 && s[8] != '_') {
      s += 8;
      while(*s && *s != '=' && d < limit) {
        char c = *s++;
        if (c == '_' || c == '$') c= c ^ ('_' ^ '$');
        *d++ = c;
      }
    } else {
      *d++ = 'i';
      *d++ = 'x';
      *d++ = '$';
      while(*s && *s != '=' && d < limit) *d++ = *s++;
    }
    *d = 0;
    if (*s == '=') ++s;
    _swix(OS_SetVarVal, _INR(0, 4), pd1.name, s, strlen(s), 0, 4);
  }

  pd1.fd = -1;
  pd2.fd = -1;
  pd1.dir_fd = -1;
  pd2.dir_fd = -1;

  _kernel_oserror *e = 0;

  e = _swix(OS_FSControl, _INR(0, 3), 12, __module_header, (uintptr_t)fsinfo - (uintptr_t)__module_header, pw);
  return e;
}

_kernel_oserror *final(int fatal, int podule, void *pw) {
  (void)pw;
  _kernel_oserror *e = 0;
  e = _swix(OS_FSControl, _INR(0, 1), 16, "IXFS");
  return e;
}

_kernel_oserror *convert_error(int r) {
  static _kernel_oserror unknown_error = {0, "Unknown Error"};
  r = -r;
  _kernel_oserror *e = 0;
  if (r > 0 && r < 4096) e = error_table[r];
  if (!e) {
    e = &unknown_error;
    eprintf("Untranslated Linux Error: %i\n", r);
    sprintf(unknown_error.errmess, "Untranslated Linux Error %i", r);
  }
  return e;
}

_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw) {
  (void)pw;
  switch (swi_no) {
    case IXSupport_LinuxSyscall - IXSupport_00:
      __asm {
        MOV     r0, r->r[0]
        MOV     r1, r->r[1]
        MOV     r2, r->r[2]
        MOV     r3, r->r[3]
        MOV     r4, r->r[4]
        MOV     r5, r->r[5]
        MOV     r6, r->r[6]
        MOV     r7, r->r[7]
        BL      __PVirt_LinuxSyscall, {r0-r7}, {r0}, {}
        MOV     r->r[0], r0
      }
      return 0;
    case IXSupport_ConvertError - IXSupport_00:
      return convert_error(r->r[0]);
  }
  return error_BAD_SWI;
}

_kernel_oserror *command_handler(const char *arg_string, int argc, int cmd_no, void *pw) {
  (void)arg_string;
  (void)argc;
  (void)pw;
  switch(cmd_no) {
    case CMD_IXFS:
      return _swix(OS_FSControl, _INR(0, 1), 14, 70);
    case CMD_IXFSBoot:
      break;
    case CMD_IXDup2: {
      int a, b;
      sscanf(arg_string, "%i %i", &a, &b);
      ix_dup2(a, b);
      break;
    }
    case CMD_IXRun: {
      char *cmd[argc + 1];

      char *env[] = {0};
      int pipes[2];
      ix_pipe2(pipes, ix_O_CLOEXEC);
      int ptmx = ix_open("/dev/ptmx", ix_O_RDWR | ix_O_CLOEXEC | ix_O_NONBLOCK, 0);
      int pid = __PVirt_fork(pipes);
      ix_close(pipes[0]);
      ix_close(pipes[1]);
      if (pid == 0) {
        ix_setsid();

        char *out = (char *)arg_string;
        char **arg = cmd;
        char c = *arg_string;
        while(c >= ' ') {
          while(c == ' ') c = *++arg_string; // Skip spaces
          *arg++ = out;
          while(c > ' ') {
            if (c== '"' || c == '\'') {
              char q = *++arg_string;
              while(q != c && q  >= ' ') {
                *out++ = q;
                q = *++arg_string;
              }
              c = *++arg_string;
            } else {
              *out++ = c;
              c = *++arg_string;
            }
          }
          *out++ = 0;
        }
        *arg = 0;

        int zero = 0;
        ix_ioctl(ptmx, ix_TIOCSPTLCK, &zero);
        int pts_no;
        ix_ioctl(ptmx, ix_TIOCGPTN, &pts_no);
        char ptsname[20];
        sprintf(ptsname, "/dev/pts/%i", pts_no);
        int pts = ix_open(ptsname, ix_O_RDWR | ix_O_CLOEXEC, 0);
        ix_dup2(pts, 0);
        ix_dup2(pts, 1);
        ix_dup2(pts, 2);

        int e = ix_execve(cmd[0], cmd, 0);
        ix_exit(-e);
      } else if (pid != 0) {
        char buff[256];
        int c;
        unsigned in = 0xFF00;
        while (true) {
          while(true) {
            c = ix_read(ptmx, &buff, sizeof(buff));
            if (c <= 0) break;
            _swix(OS_WriteN, _INR(0, 1), buff, c);
          }
          if (c != -ix_EAGAIN) break;
          if (in > 0x2000) in = _kernel_osbyte(OsByte_INKEY, 1, 0) & 0xFFFF;
          if ((in & 0xFF00) == 0x1B00) {
            in = 3; // Escape becomes CTRL C
            _kernel_osbyte(OsByte_AcknowledgeEscape, 0, 0);
            }
          if (in < 0x100) {
            c = ix_write(ptmx, &in, 1);
            if (c == 1) in = 0xFF00;
          }
        }
        int wstatus;
        ix_waitpid(pid, &wstatus, 0);
      }
      ix_close(ptmx);
    }
  }
  return 0;
}
