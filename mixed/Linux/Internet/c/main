#include <ctype.h>
#include <kernel.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "InternetLHdr.h"

#include "sys/types.h"
#include "sys/filio.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "netinet/tcp.h"
#include "arpa/inet.h"

#define ix_SYSCALL_branch 1
#include "ix/syscalls.h"

#define IXSupport_ConvertError          0x0c0204

static void eprintf(const char *fmt, ...) {
  static char s[1000];
  va_list ap;

  va_start(ap, fmt);
  int c = vsprintf(s, fmt, ap);
  va_end(ap);

  ix_write(2, s, c);
}

struct ix_sockaddr_in {
  uint16_t sin_family;
  uint16_t sin_port;
  struct in_addr sin_addr;
  char sin_zero[8];
};

static int convert_sockopt(int level, int optname) {
  switch(level) {
    case IPPROTO_TCP:
      switch(optname) {
        case TCP_NODELAY: return ix_TCP_NODELAY;
        case TCP_MAXSEG:  return ix_TCP_MAXSEG;
        case TCP_NOPUSH:  return ix_TCP_CORK;
      }
    case SOL_SOCKET:
      switch(optname) {
    //  case SO_DEBUG:       return ix_SO_DEBUG;
        case SO_REUSEADDR:   return ix_SO_REUSEADDR;
    //  case SO_TYPE:        return ix_SO_TYPE;
        case SO_ERROR:       return ix_SO_ERROR;
        case SO_DONTROUTE:   return ix_SO_DONTROUTE;
        case SO_BROADCAST:   return ix_SO_BROADCAST;
        case SO_SNDBUF:      return ix_SO_SNDBUF;
        case SO_RCVBUF:      return ix_SO_RCVBUF;
        case SO_KEEPALIVE:   return ix_SO_KEEPALIVE;
        case SO_OOBINLINE:   return ix_SO_OOBINLINE;
        case SO_LINGER:      return ix_SO_LINGER;
        case SO_REUSEPORT:   return ix_SO_REUSEPORT;
        case SO_RCVLOWAT:    return ix_SO_RCVLOWAT;
        case SO_SNDLOWAT:    return ix_SO_SNDLOWAT;
    //  case SO_RCVTIMEO:    return ix_SO_RCVTIMEO;
    //  case SO_SNDTIMEO:    return ix_SO_SNDTIMEO;
      }
  }
  eprintf("Unhandled Internet Socket Option: level 0x%X option 0x%X\n", level, optname);
  return -ix_ENOPROTOOPT;
}

static int convert_msg_flags(int ro) {
  int l = 0;
  if (ro & MSG_OOB       ) l |= ix_MSG_OOB       ;
  if (ro & MSG_PEEK      ) l |= ix_MSG_PEEK      ;
  if (ro & MSG_DONTROUTE ) l |= ix_MSG_DONTROUTE ;
  if (ro & MSG_EOR	 ) l |= ix_MSG_EOR	 ;
  if (ro & MSG_TRUNC	 ) l |= ix_MSG_TRUNC	 ;
  if (ro & MSG_CTRUNC	 ) l |= ix_MSG_CTRUNC	 ;
  if (ro & MSG_WAITALL	 ) l |= ix_MSG_WAITALL	 ;
  if (ro & MSG_DONTWAIT	 ) l |= ix_MSG_DONTWAIT	 ;
  if (ro & MSG_EOF	 ) eprintf("Not handling MSG_EOF\n");
  if (ro & MSG_COMPAT    ) eprintf("Not handling MSG_COMPAT\n");
  return l;
}

_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw) {
  (void)pw;
  int result;
  switch (swi_no) {
    case Socket_Creat - Socket_00:
      if (r->r[0] == AF_INET && (r->r[1] == SOCK_DGRAM || r->r[1] == SOCK_STREAM)) {
        result = ix_socket(r->r[0], r->r[1], r->r[2]);
      } else {
        result = -ix_EPROTONOSUPPORT;
      }
      break;
    case Socket_Read - Socket_00:
      result = ix_read(r->r[0], (void*)r->r[1], r->r[2]);
      break;
    case Socket_Write - Socket_00:
      result = ix_write(r->r[0], (void*)r->r[1], r->r[2]);
      break;
    case Socket_Recv - Socket_00:
      result = ix_recv(r->r[0], (void*)r->r[1], r->r[2], convert_msg_flags(r->r[3]));
      break;
    case Socket_Send - Socket_00:
      result = ix_send(r->r[0], (void*)r->r[1], r->r[2], convert_msg_flags(r->r[3]));
      break;
    case Socket_Connect - Socket_00: {
      const struct sockaddr_in *addr_ro = (const struct sockaddr_in *)r->r[1];
      if (addr_ro->sin_family == AF_INET || addr_ro->sin_len == AF_INET) {
        struct ix_sockaddr_in addr_linux = {AF_INET, addr_ro->sin_port, addr_ro->sin_addr};
        result = ix_connect(r->r[0], &addr_linux, sizeof(addr_linux));
      } else {
        result = -ix_EAFNOSUPPORT;
      }
      break;
    }
    case Socket_Bind - Socket_00: {
      const struct sockaddr_in *addr_ro = (const struct sockaddr_in *)r->r[1];
      if (addr_ro->sin_family == AF_INET || addr_ro->sin_len == AF_INET) {
        struct ix_sockaddr_in addr_linux = {AF_INET, addr_ro->sin_port, addr_ro->sin_addr};
        result = ix_bind(r->r[0], &addr_linux, sizeof(addr_linux));
      } else {
        result = -ix_EAFNOSUPPORT;
      }
      break;
    }
    case Socket_Getpeername - Socket_00:
      result = ix_getpeername(r->r[0], (void*)r->r[1], (ix_socklen_t *)r->r[2]);
      break;
    case Socket_Getpeername_1 - Socket_00: {
      struct sockaddr_in *addr = (void*)r->r[1];
      ix_socklen_t *len = (ix_socklen_t *)r->r[2];
      result = ix_getpeername(r->r[0], addr, len);
      if (result >= 0 && *len >= 4) {
        addr->sin_family = addr->sin_len;
        addr->sin_len = *len;
      }
      break;
    }
    case Socket_Getsockname - Socket_00:
      result = ix_getsockname(r->r[0], (void*)r->r[1], (ix_socklen_t *)r->r[2]);
      break;
    case Socket_Getsockname_1 - Socket_00: {
      struct sockaddr_in *addr = (void*)r->r[1];
      ix_socklen_t *len = (ix_socklen_t *)r->r[2];
      result = ix_getsockname(r->r[0], addr, len);
      if (result >= 0 && *len >= 4) {
        addr->sin_family = addr->sin_len;
        addr->sin_len = *len;
      }
      break;
    }
    case Socket_Select - Socket_00: {
      struct ix_timeval timeout = *(const struct ix_timeval*)r->r[4];
      result = ix_select(r->r[0], (void*)r->r[1], (void*)r->r[2], (void*)r->r[3], &timeout);
      break;
    }
    case Socket_Shutdown - Socket_00:
      result = ix_shutdown(r->r[0], r->r[1]);
      break;
    case Socket_Close - Socket_00:
      result = ix_close(r->r[0]);
      break;
    case Socket_Setsockopt - Socket_00: {
      result = convert_sockopt(r->r[1], r->r[2]);
      int level = r->r[1] == SOL_SOCKET ? ix_SOL_SOCKET : r->r[1];
      if (result >= 0) result = ix_setsockopt(r->r[0], level, result, (void*)r->r[3], r->r[4]);
      break;
    }
    case Socket_Getsockopt - Socket_00: {
      result = convert_sockopt(r->r[1], r->r[2]);
      int level = r->r[1] == SOL_SOCKET ? ix_SOL_SOCKET : r->r[1];
      if (result >= 0) result = ix_getsockopt(r->r[0], level, result, (void*)r->r[3], r->r[4]);
      if (result >= 0 && level == ix_SOL_SOCKET) {
        switch (r->r[2]) {
          case SO_ERROR:
            if (*(int*)r->r[3]) *(int*)r->r[3] = _swix(IXSupport_ConvertError, _IN(0), *(int*)r->r[3])->errnum - 0x20E00;
            break;
        }
      }
      break;
    }
    case Socket_Ioctl - Socket_00:
      switch ((uint32_t)r->r[1]) {
        case FIONBIO:
          result = ix_fcntl(r->r[0], ix_F_GETFL, 0);
          if (result < 0) break;
          if (r->r[2]) {
            result |= ix_O_NONBLOCK;
          } else {
            result &= ~ix_O_NONBLOCK;
          }
          result = ix_fcntl(r->r[0], ix_F_SETFL, result);
          break;
        default:
          eprintf("Unhandled Internet Ioctl: 0x%08X\n", r->r[1]);
          return error_BAD_SWI;
      }
      break;
    default:
      eprintf("Unhandled Internet SWI: %i\n", swi_no);
      return error_BAD_SWI;
  }
  if (result < 0) {
    return _swix(IXSupport_ConvertError, _IN(0), result);
  }
  r->r[0] = result;
  return 0;
 }
